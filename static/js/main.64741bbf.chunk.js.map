{"version":3,"sources":["components/CellHasNumber.js","components/CellHasCandidates.js","components/Cell.js","components/Grid.js","components/CheckBoxes.js","components/ComboBoxes.js","components/Timer.js","components/SolvePuzzle.js","components/Buttons.js","components/Sudoku.js","index.js"],"names":["CellHasNumber","gridID","value","updateGrid","revealedCell","invalidCellNumber","isGamePaused","style","marginRight","pointerEvents","opacity","className","onContextMenu","e","preventDefault","onMouseDown","button","CellHasCandidates","candidates","updateCandidates","nakedSinglesToggle","hiddenSinglesToggle","hiddenSingles","highlightNakedSingles","length","highlightHiddenSingles","number","includes","onClick","parseInt","target","id","Cell","Grid","grid","setGrid","revealedGrid","puzzleCompleted","setIsPuzzleSolvable","useState","Array","fill","invalidCellNumbers","setInvalidCellNumbers","newGrid","useEffect","invalidCells","row","count","index","push","column","subGrid","subGridStartingIndex","Math","floor","findAnyInvalidCellNumbers","newInvalidCells","updateInvalidCellNumbers","cellNumbers","checkForWinningGrid","map","item","CheckBoxes","showCandidatesToggle","setShowCandidatesToggle","setHiddenSinglesToggle","setNakedSinglesToggle","type","checked","onChange","ComboBoxes","setPuzzleSource","setPuzzleDifficulty","htmlFor","event","name","Timer","isPuzzleCompleted","resetTimer","setResetTimer","totalSeconds","setTotalSeconds","intervalID","setTimeout","clearInterval","timeString","tempTotalSeconds","hours","minutes","seconds","displayTime","SolvePuzzle","findSubGrid","isPuzzleSolvable","solvePuzzleToggle","setSolvePuzzleToggle","isValid","theGrid","num","x","theSubGrid","i","j","solveSuduko","gridCopy","console","log","disabled","Buttons","newPuzzle","savePuzzle","pauseGame","resetPuzzle","Sudoku","starterGrid","gameId","setIsGamePaused","setIsPuzzleCompleted","puzzleSource","puzzleDifficulty","setRevealedGrid","setCandidates","setHiddenSingles","singles","array","single","indexOf","savedGrid","localStorage","getItem","JSON","parse","savedRevealedGrid","allTheRowSingles","oneRow","concat","allTheColumnSingles","oneColumn","subGridStartingIndexes","allTheSubGridCandidates","oneSubGrid","tempHiddenSingles","tempSingle","candidate","theRow","theColumn","findHiddenSingles","rowNumbers","columnNumbers","subGridNumbers","possibleCandidates","tempCandidates","notPossibleCandidates","cellsCandidates","filter","findCandidates","cell","splice","fetch","then","response","text","html","stringify","tempGrid","c","catch","err","statusText","setItem","destination","document","getElementById","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.64741bbf.chunk.js","sourcesContent":["function CellHasNumber(gridID, value, updateGrid, revealedCell, invalidCellNumber, isGamePaused) {\r\n    function onContextMenu(e) {\r\n        e.preventDefault();\r\n    }\r\n\r\n    function mouseDownHandler(e) {\r\n        // prevents scroll circle\r\n        e.preventDefault();\r\n\r\n        // if middle mouse button is clicked\r\n        if(revealedCell === false && e.button === 1) {\r\n            updateGrid(gridID, 0);\r\n        }\r\n    }\r\n\r\n    // refactor\r\n    function getStyle() {\r\n        let notPaused = {\r\n            marginRight: \"5px\",\r\n        }\r\n\r\n        let paused = {\r\n            marginRight: \"5px\",\r\n            pointerEvents: \"none\",\r\n            opacity: \"0.4\",\r\n        }\r\n\r\n        if (isGamePaused) {\r\n            return paused;\r\n        } else {\r\n            return notPaused;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={getStyle()}>\r\n            <div className={revealedCell ? 'cellNumberRevealed' : 'cellNumber'} onContextMenu={onContextMenu} onMouseDown={mouseDownHandler} >\r\n                {value}\r\n                <div className={invalidCellNumber ? 'invalidCellNumber' : ''}></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CellHasNumber;","import React from \"react\";\r\n\r\nfunction CellHasCandidates(gridID, updateGrid, candidates, updateCandidates, nakedSinglesToggle, hiddenSinglesToggle, hiddenSingles, isGamePaused) {\r\n\r\n    function onClick(e) {\r\n        updateGrid(gridID, parseInt(e.target.id));\r\n    }\r\n\r\n    function onContextMenu(e) {\r\n        e.preventDefault();\r\n        updateCandidates(gridID, parseInt(e.target.id));\r\n    }\r\n\r\n    function mouseDownHandler(e) {\r\n        // prevents scroll circle\r\n        e.preventDefault();\r\n    }\r\n\r\n    function highlightNakedSingles() {\r\n        return nakedSinglesToggle && candidates.length === 1;\r\n    }\r\n\r\n    function highlightHiddenSingles(number) {\r\n        return  hiddenSinglesToggle && hiddenSingles[gridID].includes(number);\r\n    }\r\n\r\n    // refactor\r\n    function getStyle() {\r\n        let notPaused = {\r\n            marginRight: \"5px\",\r\n        }\r\n\r\n        let paused = {\r\n            marginRight: \"5px\",\r\n            pointerEvents: \"none\",\r\n            opacity: \"0.4\",\r\n        }\r\n\r\n        if (isGamePaused) {\r\n            return paused;\r\n        } else {\r\n            return notPaused;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={getStyle()} className='cell' onClick={onClick} onContextMenu={onContextMenu} onMouseDown={mouseDownHandler} >\r\n            { candidates.includes(1) ? <div id=\"1\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(1) ? \"redText\" : \"blackText\"}`}>1</div> : <div id=\"1\" className='candidateCell'/> }\r\n            { candidates.includes(2) ? <div id=\"2\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(2) ? \"redText\" : \"blackText\"}`}>2</div> : <div id=\"2\" className='candidateCell'/> }\r\n            { candidates.includes(3) ? <div id=\"3\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(3) ? \"redText\" : \"blackText\"}`}>3</div> : <div id=\"3\" className='candidateCell'/> }\r\n\r\n            { candidates.includes(4) ? <div id=\"4\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(4) ? \"redText\" : \"blackText\"}`}>4</div> : <div id=\"4\" className='candidateCell'/> }\r\n            { candidates.includes(5) ? <div id=\"5\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(5) ? \"redText\" : \"blackText\"}`}>5</div> : <div id=\"5\" className='candidateCell'/> }\r\n            { candidates.includes(6) ? <div id=\"6\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(6) ? \"redText\" : \"blackText\"}`}>6</div> : <div id=\"6\" className='candidateCell'/> }\r\n\r\n            { candidates.includes(7) ? <div id=\"7\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(7) ? \"redText\" : \"blackText\"}`}>7</div> : <div id=\"7\" className='candidateCell'/> }\r\n            { candidates.includes(8) ? <div id=\"8\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(8) ? \"redText\" : \"blackText\"}`}>8</div> : <div id=\"8\" className='candidateCell'/> }\r\n            { candidates.includes(9) ? <div id=\"9\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(9) ? \"redText\" : \"blackText\"}`}>9</div> : <div id=\"9\" className='candidateCell'/> }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CellHasCandidates;","import React from \"react\";\r\n\r\nimport CellHasNumber from \"./CellHasNumber.js\"\r\nimport CellHasCandidates from \"./CellHasCandidates.js\"\r\n\r\nimport \"../index.css\";\r\n\r\nfunction Cell({gridID, value, updateGrid, revealedCell, invalidCellNumber, candidates, updateCandidates, nakedSinglesToggle, hiddenSinglesToggle, hiddenSingles, isGamePaused}) {\r\n    return (\r\n        <>\r\n            {value === 0 ? CellHasCandidates(gridID, updateGrid, candidates, updateCandidates, nakedSinglesToggle, hiddenSinglesToggle, hiddenSingles, isGamePaused) : CellHasNumber(gridID, value, updateGrid, revealedCell, invalidCellNumber, isGamePaused) }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Cell;","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Cell from \"./Cell.js\"\r\nimport \"../index.css\";\r\n\r\nfunction Grid({grid, setGrid, revealedGrid, candidates, updateCandidates, nakedSinglesToggle, hiddenSinglesToggle, hiddenSingles, isGamePaused, puzzleCompleted, setIsPuzzleSolvable}) {\r\n    const [invalidCellNumbers, setInvalidCellNumbers] = useState([Array(81).fill(false)]);\r\n\r\n    function updateGrid(gridID, value) {\r\n        const newGrid = [...grid];\r\n        newGrid[gridID] = value;\r\n\r\n        setGrid(newGrid);\r\n    }\r\n\r\n    function updateInvalidCellNumbers(invalidCells) {\r\n        const newInvalidCells = Array(81).fill(false);\r\n\r\n        for (let index = 0; index < invalidCells.length; index++) {\r\n            newInvalidCells[invalidCells[index]] = true;\r\n            \r\n        }\r\n        setInvalidCellNumbers(newInvalidCells);\r\n    }\r\n\r\n    function checkForWinningGrid(invalidCells) {\r\n        let cellNumbers = 0;\r\n\r\n        for (let index = 0; index < grid.length; index++) {\r\n            if (grid[index] !== 0) {\r\n                cellNumbers += 1;\r\n            }\r\n        }\r\n\r\n        if (cellNumbers === 81 && invalidCells.length === 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function findAnyInvalidCellNumbers() {\r\n        const invalidCells = [];\r\n\r\n        // Horizontal check\r\n        for (let row = 0; row < 81; row+=9) {\r\n            var count = {};\r\n            for (let index = 0+row; index < 9+row; index++) {\r\n                var number = grid[index];\r\n                if (number > 0) {\r\n                    if (number in count) {\r\n                        invalidCells.push(count[number]);\r\n                        invalidCells.push(index);\r\n                    } else {\r\n                        count[number] = index;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Vertical check\r\n        for (let column = 0; column < 9; column++) {\r\n            count = {};\r\n            for (let index = 0+column; index < 81+column; index+=9) {\r\n                number = grid[index];\r\n                if (number > 0) {\r\n                    if (number in count) {\r\n                        invalidCells.push(count[number]);\r\n                        invalidCells.push(index);\r\n                    } else {\r\n                        count[number] = index;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Subgrid check\r\n        for (let subGrid = 0; subGrid < 9; subGrid++) {\r\n            count = {};\r\n            const subGridStartingIndex = Math.floor(subGrid / 3) * 27 + ((subGrid % 3) * 3);\r\n\r\n            for (let column = subGridStartingIndex; column < 3 + subGridStartingIndex; column++) {\r\n                for (let row = 0; row < 20; row+=9) {\r\n                    number = grid[column+row];\r\n                    if (number > 0) {\r\n                        if (number in count) {\r\n                            invalidCells.push(count[number]);\r\n                            invalidCells.push(column+row);\r\n                        } else {\r\n                            count[number] = column+row;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n            \r\n        return invalidCells;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const invalidCells = findAnyInvalidCellNumbers();\r\n\r\n        updateInvalidCellNumbers(invalidCells);\r\n\r\n        if (invalidCells.length > 0) {\r\n            setIsPuzzleSolvable(false);\r\n        } else {\r\n            setIsPuzzleSolvable(true);\r\n        }\r\n\r\n        if (checkForWinningGrid(invalidCells)) {\r\n            puzzleCompleted();\r\n        }\r\n    }, [grid]);\r\n\r\n    return (\r\n        <div className='gameBoardGrid'>                                                                                          \r\n            { grid.map((item, index) => \r\n                <Cell key={index} \r\n                      gridID={index} \r\n                      value={item} \r\n                      updateGrid={updateGrid} \r\n                      revealedCell={revealedGrid[index] !== 0} \r\n                      invalidCellNumber={invalidCellNumbers[index]} \r\n                      candidates={candidates[index]} \r\n                      updateCandidates={updateCandidates} \r\n                      nakedSinglesToggle={nakedSinglesToggle}\r\n                      hiddenSinglesToggle={hiddenSinglesToggle}\r\n                      hiddenSingles={hiddenSingles}\r\n                      isGamePaused={isGamePaused}/> \r\n                      )}\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default Grid;","function CheckBoxes({showCandidatesToggle, setShowCandidatesToggle, hiddenSinglesToggle, setHiddenSinglesToggle, nakedSinglesToggle, setNakedSinglesToggle}) {\r\n    return (\r\n        <div>\r\n            <label>\r\n                <input type=\"checkbox\" checked={hiddenSinglesToggle} onChange={() => {setHiddenSinglesToggle(!hiddenSinglesToggle)}} />\r\n                Show Hidden Singles\r\n            </label>\r\n            <label>\r\n                <input type=\"checkbox\" checked={nakedSinglesToggle} onChange={() => {setNakedSinglesToggle(!nakedSinglesToggle)}} />\r\n                Show Naked Singles\r\n            </label>\r\n            <label>\r\n                <input type=\"checkbox\" onChange={() => {setShowCandidatesToggle(!showCandidatesToggle)}} />\r\n                Show Candidates\r\n            </label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CheckBoxes;","function ComboBoxes({setPuzzleSource, setPuzzleDifficulty}) {\r\n\r\n    function puzzleSourceChange(event) {\r\n        setPuzzleSource(event.target.value);\r\n    }\r\n\r\n    function puzzleDifficultyChange(event) {\r\n        setPuzzleDifficulty(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className='gridDisplay select'>\r\n            <label htmlFor=\"puzzleSource\">Puzzle Source:</label>\r\n            <select id=\"puzzleSource\" onChange={puzzleSourceChange} name=\"puzzleSource\">\r\n                <option value=\"sugoku\">Sugoku</option>\r\n            </select>\r\n        \r\n            <label htmlFor=\"puzzleDifficulty\">Puzzle Difficulty:</label>\r\n            <select id=\"puzzleDifficulty\" onChange={puzzleDifficultyChange} name=\"puzzleDifficulty\">\r\n                <option value=\"easy\">Easy</option>\r\n                <option value=\"medium\">Medium</option>\r\n                <option value=\"hard\">Hard</option>\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ComboBoxes;","import React, { useEffect, useState } from \"react\";\r\nimport \"../index.css\";\r\n\r\nfunction Timer({isGamePaused, isPuzzleCompleted, resetTimer, setResetTimer}) {\r\n    const [totalSeconds, setTotalSeconds] = useState(0);\r\n\r\n    function displayTime(totalSeconds) {\r\n        let timeString = '0:00';\r\n        if (totalSeconds > 0) {\r\n            var tempTotalSeconds = totalSeconds;\r\n            var hours = Math.floor(tempTotalSeconds / 3600);\r\n            tempTotalSeconds %= 3600;\r\n\r\n            var minutes = Math.floor(tempTotalSeconds / 60);\r\n            tempTotalSeconds %= 60;\r\n            \r\n            var seconds = Math.floor(tempTotalSeconds); \r\n\r\n            if (hours > 0) {\r\n                timeString = hours + ':';\r\n            } else {\r\n                timeString = '';\r\n            }\r\n\r\n            if (minutes > 0) {\r\n                if (minutes < 10) {\r\n                    timeString += '0'\r\n                }\r\n                timeString += minutes + ':';\r\n            } else {\r\n                timeString += '0:';\r\n            }\r\n\r\n            if (seconds > 0) {\r\n                if (seconds < 10) {\r\n                    timeString += '0';\r\n                }\r\n                timeString += seconds;\r\n            } else {\r\n                timeString += '00';\r\n            }\r\n        }\r\n\r\n        // temp\r\n        if (isGamePaused) {\r\n            timeString += ' (PAUSED)';\r\n        } else if (isPuzzleCompleted) {\r\n            timeString += ' (Puzzle Completed!)';\r\n        }\r\n\r\n        return timeString;\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (resetTimer === true) {\r\n            setTotalSeconds(0);\r\n            setResetTimer(false);\r\n        }\r\n        \r\n    }, [resetTimer]);\r\n\r\n    useEffect(() => {\r\n        const intervalID = setTimeout(() => {\r\n            if(!isGamePaused && !isPuzzleCompleted) {\r\n                setTotalSeconds(totalSeconds + 1);\r\n        }\r\n            }, 1000);\r\n        return () => clearInterval(intervalID);\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {displayTime(totalSeconds)}\r\n        </>\r\n    );\r\n    }\r\n\r\n    export default Timer;","import React, { useState, useEffect } from \"react\";\r\n\r\nfunction SolvePuzzle({grid, setGrid, findSubGrid, isPuzzleSolvable}) {\r\n    const [solvePuzzleToggle, setSolvePuzzleToggle] = useState(false);\r\n    \r\n    function solvePuzzleClicked() {\r\n        setSolvePuzzleToggle(true);\r\n    }\r\n\r\n    function isValid(theGrid, index, num) {\r\n        const row = Math.floor(index/9);\r\n        const column = index%9;\r\n        \r\n        // row\r\n        for (let x = row * 9 ; x < (row*9)+9; x++) {\r\n            if (theGrid[x] === num) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // column\r\n        for (let x = column; x < 81; x+=9) {\r\n            if (theGrid[x] === num) {\r\n                return false;\r\n            }       \r\n        }\r\n        \r\n        // subGrid\r\n        const theSubGrid = findSubGrid(column, row);\r\n\r\n        const subGridStartingIndex = Math.floor(theSubGrid / 3) * 27 + ((theSubGrid % 3) * 3);\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                if (theGrid[subGridStartingIndex + i + (j*9)] === num) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function solveSuduko(gridCopy, index) {\r\n        // exit condition if entire grid is solved\r\n        if (index === 81) {\r\n            setGrid(gridCopy);\r\n            return true;\r\n        }\r\n           \r\n        // checks if cell already has a number in it\r\n        if (gridCopy[index] > 0) {\r\n\r\n            return solveSuduko(gridCopy, index + 1);\r\n        } \r\n     \r\n        for (let num = 1; num <= 9; num++) {\r\n            if (isValid(gridCopy, index, num)) {\r\n                gridCopy[index] = num;\r\n\r\n                if (solveSuduko(gridCopy, index + 1)) {\r\n                    return true;\r\n                }\r\n            }\r\n            gridCopy[index] = 0;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (solvePuzzleToggle === true) {\r\n            let gridCopy = [...grid];\r\n\r\n            if (solveSuduko(gridCopy, 0) === true) {\r\n                console.log('Puzzle Solved!');\r\n                setSolvePuzzleToggle(false);\r\n            } else {\r\n                console.log('Not Solvable!');\r\n            }\r\n        }\r\n    }, [solvePuzzleToggle]);\r\n\r\n    return (\r\n        <input type=\"button\" id=\"solvePuzzleButton\" value=\"Solve Puzzle\" disabled={!isPuzzleSolvable} onClick={solvePuzzleClicked}/>\r\n    );\r\n}\r\n\r\nexport default SolvePuzzle;","import Timer from \"./Timer.js\"\r\nimport SolvePuzzle from \"./SolvePuzzle.js\"\r\n\r\nfunction Buttons({newPuzzle, savePuzzle, pauseGame, isGamePaused, resetPuzzle, resetTimer, setResetTimer, grid, setGrid, findSubGrid, isPuzzleCompleted, isPuzzleSolvable}) {\r\n    return (\r\n        <div className='theButtons'>\r\n            <div>\r\n                <input type=\"button\" id=\"newPuzzleButton\" value=\"New Puzzle\" onClick={newPuzzle}/>\r\n            </div>\r\n            <div>\r\n                <input type=\"button\" id=\"savePuzzleButton\" value=\"Save Puzzle\" onClick={savePuzzle}/>\r\n            </div>\r\n            <div>\r\n                <input type=\"button\" id=\"pauseGameButton\" value=\"Pause Game\" onClick={pauseGame}/>\r\n            </div>\r\n            \r\n            <div>\r\n                <Timer isGamePaused={isGamePaused} isPuzzleCompleted={isPuzzleCompleted} resetTimer={resetTimer} setResetTimer={setResetTimer}/>\r\n            </div>\r\n            \r\n            <div>\r\n                <input type=\"button\" id=\"resetPuzzleButton\" value=\"Reset Puzzle\" onClick={resetPuzzle}/>\r\n            </div>\r\n            <div>\r\n                <SolvePuzzle grid={grid} setGrid={setGrid} findSubGrid={findSubGrid} isPuzzleSolvable={isPuzzleSolvable}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Buttons;","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Grid from \"./Grid.js\"\r\n\r\nimport CheckBoxes from \"./CheckBoxes.js\"\r\nimport ComboBoxes from \"./ComboBoxes.js\"\r\nimport Buttons from \"./Buttons.js\"\r\nimport \"../index.css\";\r\n\r\nfunction Sudoku() {\r\n    let starterGrid = [0, 0, 5, 0, 6, 0, 3, 2, 0,\r\n        0, 0, 0, 3, 0, 0, 0, 0, 4,\r\n        0, 0, 0, 9, 0, 7, 0, 0, 0,\r\n        3, 0, 2, 8, 0, 0, 0, 0, 7,\r\n        0, 0, 7, 0, 0, 0, 4, 0, 5,\r\n        0, 9, 0, 0, 0, 1, 0, 0, 8,\r\n        0, 0, 3, 0, 0, 0, 0, 6, 0,\r\n        0, 0, 0, 0, 7, 0, 0, 0, 0,\r\n        8, 6, 0, 0, 2, 0, 0, 0, 0];\r\n\r\n    const starterGrid2 = [0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n    const [gameId, setGameId] = useState(1);\r\n\r\n    const [resetTimer, setResetTimer] = useState(false);\r\n    \r\n    const [hiddenSinglesToggle, setHiddenSinglesToggle] = useState(false);\r\n    const [nakedSinglesToggle, setNakedSinglesToggle] = useState(false);\r\n    const [showCandidatesToggle, setShowCandidatesToggle] = useState(false);\r\n\r\n    const [isGamePaused, setIsGamePaused] = useState(false);\r\n    const [isPuzzleCompleted, setIsPuzzleCompleted] = useState(false);\r\n    const [isPuzzleSolvable, setIsPuzzleSolvable] = useState(true);\r\n\r\n    const [puzzleSource, setPuzzleSource] = useState('sugoku');\r\n    const [puzzleDifficulty, setPuzzleDifficulty] = useState('easy');\r\n\r\n    const [revealedGrid, setRevealedGrid] = useState(starterGrid);\r\n    const [grid, setGrid] = useState(revealedGrid);\r\n\r\n    const [candidates, setCandidates] = useState(Array(81).fill([]));\r\n    \r\n    const [hiddenSingles, setHiddenSingles] = useState(Array(81).fill([]));\r\n\r\n    function newPuzzle() {\r\n        createNewPuzzle();\r\n        setResetTimer(true);\r\n    }\r\n\r\n    function createNewPuzzle() {\r\n        if (puzzleSource === 'sugoku') {\r\n            fetch(`https://sugoku.herokuapp.com/board?difficulty=${puzzleDifficulty}`)\r\n            .then(response => {\r\n                return response.text();\r\n            })\r\n            .then(function (html) {\r\n                let newPuzzle = JSON.stringify(html);\r\n    \r\n                let tempGrid = [];\r\n    \r\n                for (let index = 0; index < newPuzzle.length; index++) {\r\n                    var c = newPuzzle[index]\r\n                    if (c >= '0' && c <= '9') {\r\n                        tempGrid.push(parseInt(c));\r\n                    }\r\n                }\r\n                setRevealedGrid(tempGrid);\r\n                setGrid(tempGrid);\r\n            })\r\n            .catch(function (err) {\r\n                // \"Not Found\"\r\n                console.log(err.statusText);\r\n            });\r\n        }\r\n    }\r\n\r\n    function savePuzzle() {\r\n        localStorage.setItem('savedGrid',  JSON.stringify(grid));\r\n        localStorage.setItem('savedRevealedGrid',JSON.stringify(revealedGrid));\r\n    }\r\n\r\n    function pauseGame() {\r\n        setIsGamePaused(!isGamePaused);\r\n    }\r\n\r\n    function resetPuzzle() {\r\n        setGrid(revealedGrid);\r\n        setCandidates(Array(81).fill([]));\r\n        setHiddenSingles(Array(81).fill([]));\r\n        setResetTimer(true);\r\n\r\n        setIsGamePaused(false);\r\n        setIsPuzzleCompleted(false);\r\n    }\r\n \r\n    function updateCandidates(cell, candidate) {\r\n        const tempCandidates = [...candidates];\r\n\r\n        var index = tempCandidates[cell].indexOf(candidate);\r\n        if (index === -1) {\r\n            tempCandidates[cell] = [...tempCandidates[cell], candidate];\r\n        } else {\r\n            tempCandidates[cell].splice(index, 1);\r\n        }\r\n\r\n        setCandidates(tempCandidates);\r\n    }\r\n\r\n    // refactor?\r\n    function singles(array) {\r\n        for (var index = 0, single = []; index < array.length; index++) {\r\n          if (array.indexOf(array[index], array.indexOf(array[index]) + 1) === -1)\r\n            single.push(array[index]);\r\n        };\r\n        return single;\r\n      };\r\n      \r\n    // refactor?  BUGS\r\n    function findHiddenSingles() {\r\n        // rows singles\r\n        let allTheRowSingles = [];\r\n        for (let row = 0; row < 81; row+=9) {\r\n            let oneRow = [];\r\n            for (let index = row; index < row+9; index++) {\r\n                oneRow = oneRow.concat(candidates[index]);\r\n            }\r\n            allTheRowSingles.push(singles(oneRow));\r\n        }\r\n\r\n        // columns singles\r\n        let allTheColumnSingles = [];\r\n        for (let column = 0; column < 9; column++) {\r\n            let oneColumn = [];\r\n            for (let index = column; index < 81; index+=9) {\r\n                oneColumn = oneColumn.concat(candidates[index]);\r\n            }\r\n            allTheColumnSingles.push(singles(oneColumn));\r\n        }\r\n\r\n        // subgrid singles\r\n        const subGridStartingIndexes = [0, 3, 6, 27, 30, 33, 54, 57, 60]\r\n        let allTheSubGridCandidates = [];\r\n        for (let subGrid = 0; subGrid < 9; subGrid++) {\r\n            const subGridStartingIndex = subGridStartingIndexes[subGrid];\r\n            let oneSubGrid = []\r\n\r\n            for (let column = subGridStartingIndex; column < 3 + subGridStartingIndex; column++) {\r\n                for (let row = 0; row < 20; row+=9) {\r\n                    oneSubGrid = oneSubGrid.concat(candidates[row+column]);\r\n                }\r\n            }\r\n            allTheSubGridCandidates.push(singles(oneSubGrid));\r\n        }\r\n\r\n        const tempHiddenSingles = []\r\n        for (let index = 0; index < 81; index++) {\r\n            const tempSingle = []\r\n            for (let candidate = 0; candidate < candidates[index].length; candidate++) {\r\n                const theRow = Math.floor(index/9);\r\n                const theColumn = index%9;\r\n                const theSubGrid = findSubGrid(theColumn, theRow);\r\n\r\n                if (allTheRowSingles[theRow].includes(candidates[index][candidate]) ||\r\n                    allTheColumnSingles[theColumn].includes(candidates[index][candidate]) ||\r\n                    allTheSubGridCandidates[theSubGrid].includes(candidates[index][candidate])) {\r\n                        tempSingle.push(candidates[index][candidate]);\r\n                }\r\n            }\r\n            if (tempSingle.length > 0) {\r\n                tempHiddenSingles.push(tempSingle);\r\n            } else {\r\n                tempHiddenSingles.push([]);\r\n            }\r\n            \r\n        }\r\n        setHiddenSingles(tempHiddenSingles);\r\n    }\r\n\r\n    function findCandidates() {\r\n        // Find all numbers in each row\r\n        let rowNumbers = [];\r\n        for (let row = 0; row < 81; row+=9) {\r\n            let oneRow = [];\r\n            for (let column = 0; column < 9; column++) {\r\n                if (grid[row+column] > 0) {\r\n                    oneRow.push(grid[row+column]);\r\n                }\r\n            }\r\n            rowNumbers.push(oneRow);\r\n        }\r\n        \r\n        // Find all numbers in each column\r\n        let columnNumbers = [];\r\n        for (let column = 0; column < 9; column++) {\r\n            let oneColumn = [];\r\n            for (let row = 0; row < 81; row+=9) {\r\n                if (grid[row+column] > 0) {\r\n                    oneColumn.push(grid[row+column]);\r\n                }\r\n            }\r\n            columnNumbers.push(oneColumn);\r\n        }\r\n\r\n        // Find all numbers in each subgrid\r\n        let subGridNumbers = [];\r\n        for (let subGrid = 0; subGrid < 9; subGrid++) {\r\n            const subGridStartingIndex = Math.floor(subGrid / 3) * 27 + ((subGrid % 3) * 3);\r\n            let oneSubGrid = []\r\n\r\n            for (let column = subGridStartingIndex; column < 3 + subGridStartingIndex; column++) {\r\n                for (let row = 0; row < 20; row+=9) {\r\n                    if (grid[row+column] > 0) {\r\n                        oneSubGrid.push(grid[row+column]);\r\n                    }\r\n                }\r\n            }\r\n            subGridNumbers.push(oneSubGrid);\r\n        }\r\n\r\n        const possibleCandidates = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n        const tempCandidates = Array(81).fill([]);\r\n        for (let index = 0; index < grid.length; index++) {\r\n            if (grid[index] === 0) {\r\n                const row = Math.floor(index/9);\r\n                const column = index%9;\r\n                const subGrid = findSubGrid(column, row);\r\n\r\n                const notPossibleCandidates = rowNumbers[row].concat(columnNumbers[column], subGridNumbers[subGrid]);\r\n                const cellsCandidates = possibleCandidates.filter(i => !notPossibleCandidates.includes(i));\r\n\r\n                tempCandidates[index] = cellsCandidates;\r\n            }\r\n            else {\r\n                tempCandidates[index] = [grid[index]];\r\n            }\r\n        }\r\n\r\n        setCandidates(tempCandidates);\r\n    }\r\n\r\n    // refactor?\r\n    function findSubGrid(column, row) {\r\n        \r\n        if (row < 3) {\r\n            if (column < 3) {\r\n                return 0;\r\n            }\r\n            else if (column < 6) {\r\n                return 1;\r\n            }\r\n            else if (column < 9) {\r\n                return 2;\r\n            }\r\n        } \r\n        else if ( row < 6) {\r\n            if (column < 3) {\r\n                return 3;\r\n            }\r\n            else if (column < 6) {\r\n                return 4;\r\n            }\r\n            else if (column < 9) {\r\n                return 5;\r\n            }    \r\n        }\r\n        else if ( row < 9) {\r\n            if (column < 3) {\r\n                return 6;\r\n            }\r\n            else if (column < 6) {\r\n                return 7;\r\n            }\r\n            else if (column < 9) {\r\n                return 8;\r\n            }    \r\n        }\r\n    }\r\n\r\n    function puzzleCompleted() {\r\n        setIsPuzzleCompleted(true);\r\n        console.log('winner');\r\n\r\n        // Remove localStorage on puzzle completion?\r\n        // localStorage.removeItem('savedGrid');\r\n        // localStorage.removeItem('savedRevealedGrid');\r\n    }\r\n\r\n    useEffect(() => {\r\n        const savedGrid = localStorage.getItem('savedGrid');\r\n\r\n        if (savedGrid !== null) {\r\n            setGrid(JSON.parse(savedGrid));\r\n        } else {\r\n            setGrid(starterGrid);\r\n        }\r\n\r\n        const savedRevealedGrid = localStorage.getItem('savedRevealedGrid');\r\n\r\n        if (savedRevealedGrid !== null) {\r\n            setRevealedGrid(JSON.parse(savedRevealedGrid));\r\n        } else {\r\n            setRevealedGrid(starterGrid);\r\n        }\r\n      }, []);\r\n\r\n    useEffect(() => {\r\n        if (hiddenSinglesToggle === true) {\r\n            findHiddenSingles();\r\n        }\r\n    }, [candidates]);\r\n    \r\n    useEffect(() => {\r\n        findCandidates();\r\n\r\n        if (showCandidatesToggle === false) {\r\n            setHiddenSinglesToggle(false);\r\n            setNakedSinglesToggle(false);\r\n            setCandidates(Array(81).fill([]));\r\n        } \r\n    }, [hiddenSinglesToggle, nakedSinglesToggle, showCandidatesToggle, grid]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Sudoku</h1>\r\n            <div className=\"gridDisplay\">\r\n                <Grid key={gameId}\r\n                      grid={grid} \r\n                      setGrid={setGrid} \r\n                      revealedGrid={revealedGrid} \r\n                      candidates={candidates} \r\n                      updateCandidates={updateCandidates} \r\n                      nakedSinglesToggle={nakedSinglesToggle} \r\n                      hiddenSinglesToggle={hiddenSinglesToggle} \r\n                      hiddenSingles={hiddenSingles}\r\n                      isGamePaused={isGamePaused}\r\n                      puzzleCompleted={puzzleCompleted}\r\n                      setIsPuzzleSolvable={setIsPuzzleSolvable}/>\r\n                <div>\r\n                    <ComboBoxes setPuzzleSource={setPuzzleSource}\r\n                                setPuzzleDifficulty={setPuzzleDifficulty}/>\r\n                    <Buttons newPuzzle={newPuzzle} \r\n                            savePuzzle={savePuzzle}\r\n                            pauseGame={pauseGame} \r\n                            isGamePaused={isGamePaused} \r\n                            resetPuzzle={resetPuzzle} \r\n                            resetTimer={resetTimer}\r\n                            setResetTimer={setResetTimer}\r\n                            grid={grid}\r\n                            setGrid={setGrid}\r\n                            findSubGrid={findSubGrid}\r\n                            isPuzzleCompleted={isPuzzleCompleted}\r\n                            isPuzzleSolvable={isPuzzleSolvable} />\r\n                </div>\r\n                <CheckBoxes showCandidatesToggle={showCandidatesToggle} \r\n                            setShowCandidatesToggle={setShowCandidatesToggle}\r\n                            hiddenSinglesToggle={hiddenSinglesToggle}\r\n                            setHiddenSinglesToggle={setHiddenSinglesToggle}\r\n                            nakedSinglesToggle={nakedSinglesToggle}\r\n                            setNakedSinglesToggle={setNakedSinglesToggle} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Sudoku;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Sudoku from \"./components/Sudoku.js\"\n\nimport \"./index.css\";\n\nvar destination = document.getElementById(\"container\");\n\nfunction App() {\n    return (\n        <div>\n            <Sudoku/>\n        </div>\n    );\n}\n\nReactDOM.render(\n    <App />,\n    destination\n); "],"sourceRoot":""}