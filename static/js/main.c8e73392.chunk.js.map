{"version":3,"sources":["components/CellHasNumber.js","components/CellHasCandidates.js","components/Cell.js","components/Grid.js","components/Timer.js","components/Sudoku.js","index.js"],"names":["CellHasNumber","gridID","value","updateGrid","revealedCell","invalidCellNumber","isGamePaused","style","marginRight","pointerEvents","opacity","className","onContextMenu","e","preventDefault","onMouseDown","button","CellHasCandidates","candidates","updateCandidates","nakedSinglesToggle","hiddenSinglesToggle","hiddenSingles","highlightNakedSingles","length","highlightHiddenSingles","number","includes","onClick","parseInt","target","id","Cell","Grid","grid","setGrid","starterGrid","useState","Array","fill","invalidCellNumbers","setInvalidCellNumbers","newGrid","useEffect","invalidCells","row","count","index","push","column","subGridStartingIndexes","subGrid","subGridStartingIndex","findAnyInvalidCellNumbers","newInvalidCells","updateInvalidCellNumbers","cellNumbers","checkForWinningGrid","console","log","map","item","Timer","resetTimer","setResetTimer","totalSeconds","setTotalSeconds","intervalID","setTimeout","clearInterval","timeString","tempTotalSeconds","hours","Math","floor","minutes","seconds","displayTime","CheckBoxes","showCandidatesToggle","setShowCandidatesToggle","setHiddenSinglesToggle","setNakedSinglesToggle","type","checked","onChange","ComboBoxes","htmlFor","name","Buttons","newGame","pauseGame","solvePuzzle","resetPuzzle","Sudoku","gameId","solvePuzzleToggle","setSolvePuzzleToggle","setIsGamePaused","setCandidates","setHiddenSingles","singles","array","single","indexOf","findSubGrid","isValid","theGrid","num","x","theSubGrid","i","j","solveSuduko","gridCopy","allTheRowSingles","oneRow","concat","allTheColumnSingles","oneColumn","allTheSubGridCandidates","oneSubGrid","tempHiddenSingles","tempSingle","candidate","theRow","theColumn","findHiddenSingles","rowNumbers","columnNumbers","subGridNumbers","possibleCandidates","tempCandidates","notPossibleCandidates","cellsCandidates","filter","findCandidates","cell","splice","fetch","then","response","text","html","catch","err","statusText","destination","document","getElementById","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.c8e73392.chunk.js","sourcesContent":["function CellHasNumber(gridID, value, updateGrid, revealedCell, invalidCellNumber, isGamePaused) {\r\n    function onContextMenu(e) {\r\n        e.preventDefault();\r\n    }\r\n\r\n    function mouseDownHandler(e) {\r\n        // prevents scroll circle\r\n        e.preventDefault();\r\n\r\n        // if middle mouse button is clicked\r\n        if(revealedCell === false && e.button === 1) {\r\n            updateGrid(gridID, 0);\r\n        }\r\n    }\r\n\r\n    // refactor\r\n    function getStyle() {\r\n        let notPaused = {\r\n            marginRight: \"5px\",\r\n        }\r\n\r\n        let paused = {\r\n            marginRight: \"5px\",\r\n            pointerEvents: \"none\",\r\n            opacity: \"0.4\",\r\n        }\r\n\r\n        if (isGamePaused) {\r\n            return paused;\r\n        } else {\r\n            return notPaused;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={getStyle()}>\r\n            <div className={revealedCell ? 'cellNumberRevealed' : 'cellNumber'} onContextMenu={onContextMenu} onMouseDown={mouseDownHandler} >\r\n                {value}\r\n                <div className={invalidCellNumber ? 'invalidCellNumber' : ''}></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CellHasNumber;","import React from \"react\";\r\n\r\nfunction CellHasCandidates(gridID, updateGrid, candidates, updateCandidates, nakedSinglesToggle, hiddenSinglesToggle, hiddenSingles, isGamePaused) {\r\n\r\n    function onClick(e) {\r\n        updateGrid(gridID, parseInt(e.target.id));\r\n    }\r\n\r\n    function onContextMenu(e) {\r\n        e.preventDefault();\r\n        updateCandidates(gridID, parseInt(e.target.id));\r\n    }\r\n\r\n    function mouseDownHandler(e) {\r\n        // prevents scroll circle\r\n        e.preventDefault();\r\n    }\r\n\r\n    function highlightNakedSingles() {\r\n        return nakedSinglesToggle && candidates.length === 1;\r\n    }\r\n\r\n    function highlightHiddenSingles(number) {\r\n        return  hiddenSinglesToggle && hiddenSingles[gridID].includes(number);\r\n    }\r\n\r\n    // refactor\r\n    function getStyle() {\r\n        let notPaused = {\r\n            marginRight: \"5px\",\r\n        }\r\n\r\n        let paused = {\r\n            marginRight: \"5px\",\r\n            pointerEvents: \"none\",\r\n            opacity: \"0.4\",\r\n        }\r\n\r\n        if (isGamePaused) {\r\n            return paused;\r\n        } else {\r\n            return notPaused;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={getStyle()} className='cell' onClick={onClick} onContextMenu={onContextMenu} onMouseDown={mouseDownHandler} >\r\n            { candidates.includes(1) ? <div id=\"1\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(1) ? \"redText\" : \"blackText\"}`}>1</div> : <div id=\"1\" className='candidateCell'/> }\r\n            { candidates.includes(2) ? <div id=\"2\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(2) ? \"redText\" : \"blackText\"}`}>2</div> : <div id=\"2\" className='candidateCell'/> }\r\n            { candidates.includes(3) ? <div id=\"3\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(3) ? \"redText\" : \"blackText\"}`}>3</div> : <div id=\"3\" className='candidateCell'/> }\r\n\r\n            { candidates.includes(4) ? <div id=\"4\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(4) ? \"redText\" : \"blackText\"}`}>4</div> : <div id=\"4\" className='candidateCell'/> }\r\n            { candidates.includes(5) ? <div id=\"5\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(5) ? \"redText\" : \"blackText\"}`}>5</div> : <div id=\"5\" className='candidateCell'/> }\r\n            { candidates.includes(6) ? <div id=\"6\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(6) ? \"redText\" : \"blackText\"}`}>6</div> : <div id=\"6\" className='candidateCell'/> }\r\n\r\n            { candidates.includes(7) ? <div id=\"7\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(7) ? \"redText\" : \"blackText\"}`}>7</div> : <div id=\"7\" className='candidateCell'/> }\r\n            { candidates.includes(8) ? <div id=\"8\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(8) ? \"redText\" : \"blackText\"}`}>8</div> : <div id=\"8\" className='candidateCell'/> }\r\n            { candidates.includes(9) ? <div id=\"9\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(9) ? \"redText\" : \"blackText\"}`}>9</div> : <div id=\"9\" className='candidateCell'/> }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CellHasCandidates;","import React from \"react\";\r\n\r\nimport CellHasNumber from \"./CellHasNumber.js\"\r\nimport CellHasCandidates from \"./CellHasCandidates.js\"\r\n\r\nimport \"../index.css\";\r\n\r\nfunction Cell({gridID, value, updateGrid, revealedCell, invalidCellNumber, candidates, updateCandidates, nakedSinglesToggle, hiddenSinglesToggle, hiddenSingles, isGamePaused}) {\r\n    return (\r\n        <>\r\n            {value !== 0 ? CellHasNumber(gridID, value, updateGrid, revealedCell, invalidCellNumber, isGamePaused) : CellHasCandidates(gridID, updateGrid, candidates, updateCandidates, nakedSinglesToggle, hiddenSinglesToggle, hiddenSingles, isGamePaused) }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Cell;","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Cell from \"./Cell.js\"\r\nimport \"../index.css\";\r\n\r\nfunction Grid({grid, setGrid, starterGrid, candidates, updateCandidates, nakedSinglesToggle, hiddenSinglesToggle, hiddenSingles, isGamePaused}) {\r\n    const [invalidCellNumbers, setInvalidCellNumbers] = useState([Array(81).fill(false)]);\r\n\r\n    function updateGrid(gridID, value) {\r\n        const newGrid = [...grid];\r\n        newGrid[gridID] = value;\r\n\r\n        setGrid(newGrid);\r\n    }\r\n\r\n    function updateInvalidCellNumbers(invalidCells) {\r\n        const newInvalidCells = Array(81).fill(false);\r\n\r\n        for (let index = 0; index < invalidCells.length; index++) {\r\n            newInvalidCells[invalidCells[index]] = true;\r\n            \r\n        }\r\n        setInvalidCellNumbers(newInvalidCells);\r\n    }\r\n\r\n    function checkForWinningGrid(invalidCells) {\r\n        let cellNumbers = 0;\r\n\r\n        for (let index = 0; index < grid.length; index++) {\r\n            if (grid[index] !== 0) {\r\n                cellNumbers += 1;\r\n            }\r\n        }\r\n\r\n        if (cellNumbers === 81 && invalidCells.length === 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function findAnyInvalidCellNumbers() {\r\n        const invalidCells = [];\r\n\r\n        // Horizontal check\r\n        for (let row = 0; row < 81; row+=9) {\r\n            var count = {};\r\n            for (let index = 0+row; index < 9+row; index++) {\r\n                var number = grid[index];\r\n                if (number > 0) {\r\n                    if (number in count) {\r\n                        invalidCells.push(count[number]);\r\n                        invalidCells.push(index);\r\n                    } else {\r\n                        count[number] = index;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Vertical check\r\n        for (let column = 0; column < 9; column++) {\r\n            count = {};\r\n            for (let index = 0+column; index < 81+column; index+=9) {\r\n                number = grid[index];\r\n                if (number > 0) {\r\n                    if (number in count) {\r\n                        invalidCells.push(count[number]);\r\n                        invalidCells.push(index);\r\n                    } else {\r\n                        count[number] = index;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Subgrid check\r\n        const subGridStartingIndexes = [0, 3, 6, 27, 30, 33, 54, 57, 60]\r\n\r\n        for (let subGrid = 0; subGrid < 9; subGrid++) {\r\n            count = {};\r\n            const subGridStartingIndex = subGridStartingIndexes[subGrid];\r\n\r\n            for (let column = subGridStartingIndex; column < 3 + subGridStartingIndex; column++) {\r\n                for (let row = 0; row < 20; row+=9) {\r\n                    number = grid[column+row];\r\n                    if (number > 0) {\r\n                        if (number in count) {\r\n                            invalidCells.push(count[number]);\r\n                            invalidCells.push(column+row);\r\n                        } else {\r\n                            count[number] = column+row;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n            \r\n        return invalidCells;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const invalidCells = findAnyInvalidCellNumbers();\r\n\r\n        updateInvalidCellNumbers(invalidCells);\r\n\r\n        if (checkForWinningGrid(invalidCells)) {\r\n            console.log('winner');\r\n        }\r\n    }, [grid]);\r\n\r\n    return (\r\n        <div className='gameBoardGrid'>                                                                                          \r\n            { grid.map((item, index) => \r\n                <Cell key={index} \r\n                      gridID={index} \r\n                      value={item} \r\n                      updateGrid={updateGrid} \r\n                      revealedCell={starterGrid[index] !== 0} \r\n                      invalidCellNumber={invalidCellNumbers[index]} \r\n                      candidates={candidates[index]} \r\n                      updateCandidates={updateCandidates} \r\n                      nakedSinglesToggle={nakedSinglesToggle}\r\n                      hiddenSinglesToggle={hiddenSinglesToggle}\r\n                      hiddenSingles={hiddenSingles}\r\n                      isGamePaused={isGamePaused}/> \r\n                      )}\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default Grid;","import React, { useEffect, useState } from \"react\";\r\nimport \"../index.css\";\r\n\r\nfunction Timer({isGamePaused, resetTimer, setResetTimer}) {\r\n    const [totalSeconds, setTotalSeconds] = useState(0);\r\n\r\n    function displayTime(totalSeconds) {\r\n        let timeString = '0:00';\r\n        if (totalSeconds > 0) {\r\n            var tempTotalSeconds = totalSeconds;\r\n            var hours = Math.floor(tempTotalSeconds / 3600);\r\n            tempTotalSeconds %= 3600;\r\n\r\n            var minutes = Math.floor(tempTotalSeconds / 60);\r\n            tempTotalSeconds %= 60;\r\n            \r\n            var seconds = Math.floor(tempTotalSeconds); \r\n\r\n            if (hours > 0) {\r\n                timeString = hours + ':';\r\n            } else {\r\n                timeString = '';\r\n            }\r\n\r\n            if (minutes > 0) {\r\n                if (minutes < 10) {\r\n                    timeString += '0'\r\n                }\r\n                timeString += minutes + ':';\r\n            } else {\r\n                timeString += '0:';\r\n            }\r\n\r\n            if (seconds > 0) {\r\n                if (seconds < 10) {\r\n                    timeString += '0';\r\n                }\r\n                timeString += seconds;\r\n            } else {\r\n                timeString += '00';\r\n            }\r\n        }\r\n\r\n        // temp\r\n        if (isGamePaused) {\r\n            timeString += ' (PAUSED)';\r\n        }\r\n\r\n        return timeString;\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (resetTimer === true) {\r\n            setTotalSeconds(0);\r\n            setResetTimer(false);\r\n        }\r\n        \r\n    }, [resetTimer]);\r\n\r\n    useEffect(() => {\r\n        const intervalID = setTimeout(() => {\r\n            if(!isGamePaused) {\r\n                setTotalSeconds(totalSeconds + 1);\r\n        }\r\n            }, 1000);\r\n        return () => clearInterval(intervalID);\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {displayTime(totalSeconds)}\r\n        </>\r\n    );\r\n    }\r\n\r\n    export default Timer;","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Grid from \"./Grid.js\"\r\nimport Timer from \"./Timer.js\"\r\nimport \"../index.css\";\r\n\r\nfunction CheckBoxes({showCandidatesToggle, setShowCandidatesToggle, hiddenSinglesToggle, setHiddenSinglesToggle, nakedSinglesToggle, setNakedSinglesToggle}) {\r\n    return (\r\n        <div>\r\n            <label>\r\n                <input type=\"checkbox\" checked={hiddenSinglesToggle} onChange={() => {setHiddenSinglesToggle(!hiddenSinglesToggle)}} />\r\n                Show Hidden Singles\r\n            </label>\r\n            <label>\r\n                <input type=\"checkbox\" checked={nakedSinglesToggle} onChange={() => {setNakedSinglesToggle(!nakedSinglesToggle)}} />\r\n                Show Naked Singles\r\n            </label>\r\n            <label>\r\n                <input type=\"checkbox\" onChange={() => {setShowCandidatesToggle(!showCandidatesToggle)}} />\r\n                Show Candidates\r\n            </label>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ComboBoxes() {\r\n    return (\r\n        <div className='gridDisplay select'>\r\n            <label htmlFor=\"puzzleSource\">Puzzle Source:</label>\r\n            <select id=\"puzzleSource\" name=\"puzzleSource\">\r\n                <option value=\"nyTimes\">NY Times</option>\r\n                <option value=\"qqWing\">QQ Wing</option>\r\n                <option value=\"random\">Random</option>\r\n                <option value=\"other\">Other</option>\r\n            </select>\r\n        \r\n            <label htmlFor=\"puzzleDifficulty\">Puzzle Difficulty:</label>\r\n            <select id=\"puzzleDifficulty\" name=\"puzzleDifficulty\">\r\n                <option value=\"easy\">Easy</option>\r\n                <option value=\"medium\">Medium</option>\r\n                <option value=\"hard\">Hard</option>\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Buttons({newGame, pauseGame, solvePuzzle, isGamePaused, resetPuzzle, resetTimer, setResetTimer}) {\r\n    return (\r\n        <div className='theButtons'>\r\n            <div>\r\n                <input type=\"button\" id=\"newGameButton\" value=\"New Game\" onClick={newGame}/>\r\n            </div>\r\n            <div>\r\n                <input type=\"button\" id=\"pauseGameButton\" value=\"Pause Game\" onClick={pauseGame}/>\r\n            </div>\r\n            \r\n            <div>\r\n                <Timer isGamePaused={isGamePaused} resetTimer={resetTimer} setResetTimer={setResetTimer}/>\r\n            </div>\r\n            \r\n            <div>\r\n                <input type=\"button\" id=\"resetPuzzleButton\" value=\"Reset Puzzle\" onClick={resetPuzzle}/>\r\n            </div>\r\n            <div>\r\n                <input type=\"button\" id=\"solvePuzzleButton\" value=\"Solve Puzzle\" onClick={solvePuzzle}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Sudoku() {\r\n    const [gameId, setGameId] = useState(1);\r\n\r\n    const [resetTimer, setResetTimer] = useState(false);\r\n    \r\n    const [hiddenSinglesToggle, setHiddenSinglesToggle] = useState(false);\r\n    const [nakedSinglesToggle, setNakedSinglesToggle] = useState(false);\r\n    const [showCandidatesToggle, setShowCandidatesToggle] = useState(false);\r\n\r\n    const [solvePuzzleToggle, setSolvePuzzleToggle] = useState(false);\r\n\r\n    const [isGamePaused, setIsGamePaused] = useState(false);\r\n\r\n    const starterGrid2 = [0, 0, 5, 0, 6, 0, 3, 2, 0,\r\n                         0, 0, 0, 3, 0, 0, 0, 0, 4,\r\n                         0, 0, 0, 9, 0, 7, 0, 0, 0,\r\n                         3, 0, 2, 8, 0, 0, 0, 0, 7,\r\n                         0, 0, 7, 0, 0, 0, 4, 0, 5,\r\n                         0, 9, 0, 0, 0, 1, 0, 0, 8,\r\n                         0, 0, 3, 0, 0, 0, 0, 6, 0,\r\n                         0, 0, 0, 0, 7, 0, 0, 0, 0,\r\n                         8, 6, 0, 0, 2, 0, 0, 0, 0];\r\n\r\n    const starterGrid = [0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                        0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                        0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                        0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                        0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                        0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                        0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                        0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                        0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n    const [grid, setGrid] = useState(starterGrid);\r\n    const [candidates, setCandidates] = useState(Array(81).fill([]));\r\n    \r\n    const [hiddenSingles, setHiddenSingles] = useState(Array(81).fill([]));\r\n\r\n    function resetPuzzle() {\r\n        setGrid(starterGrid);\r\n        setCandidates(Array(81).fill([]));\r\n        setHiddenSingles(Array(81).fill([]));\r\n        setResetTimer(true);\r\n    }\r\n\r\n    function pauseGame() {\r\n        setIsGamePaused(!isGamePaused);\r\n    }\r\n\r\n    // broken\r\n    function newGame() {\r\n        fetch('https://cors-anywhere.herokuapp.com/https://www.nytimes.com/puzzles/sudoku/medium')\r\n            .then(response => {\r\n             //   console.log(response);\r\n                return response.text();\r\n            })\r\n            .then(function (html) {\r\n                console.log(html);\r\n                return html;\r\n            })\r\n            .catch(function (err) {\r\n                // \"Not Found\"\r\n                console.log(err.statusText);\r\n            });\r\n        }\r\n \r\n    function updateCandidates(cell, candidate) {\r\n        const tempCandidates = [...candidates];\r\n\r\n        var index = tempCandidates[cell].indexOf(candidate);\r\n        if (index === -1) {\r\n            tempCandidates[cell] = [...tempCandidates[cell], candidate];\r\n        } else {\r\n            tempCandidates[cell].splice(index, 1);\r\n        }\r\n\r\n        setCandidates(tempCandidates);\r\n    }\r\n\r\n    // refactor?\r\n    function singles(array) {\r\n        for (var index = 0, single = []; index < array.length; index++) {\r\n          if (array.indexOf(array[index], array.indexOf(array[index]) + 1) === -1)\r\n            single.push(array[index]);\r\n        };\r\n        return single;\r\n      };\r\n      \r\n    // refactor?  BUGS\r\n    function findHiddenSingles() {\r\n        // rows singles\r\n        let allTheRowSingles = [];\r\n        for (let row = 0; row < 81; row+=9) {\r\n            let oneRow = [];\r\n            for (let index = row; index < row+9; index++) {\r\n                oneRow = oneRow.concat(candidates[index]);\r\n            }\r\n            allTheRowSingles.push(singles(oneRow));\r\n        }\r\n\r\n        // columns singles\r\n        let allTheColumnSingles = [];\r\n        for (let column = 0; column < 9; column++) {\r\n            let oneColumn = [];\r\n            for (let index = column; index < 81; index+=9) {\r\n                oneColumn = oneColumn.concat(candidates[index]);\r\n            }\r\n            allTheColumnSingles.push(singles(oneColumn));\r\n        }\r\n\r\n        // subgrid singles\r\n        const subGridStartingIndexes = [0, 3, 6, 27, 30, 33, 54, 57, 60]\r\n        let allTheSubGridCandidates = [];\r\n        for (let subGrid = 0; subGrid < 9; subGrid++) {\r\n            const subGridStartingIndex = subGridStartingIndexes[subGrid];\r\n            let oneSubGrid = []\r\n\r\n            for (let column = subGridStartingIndex; column < 3 + subGridStartingIndex; column++) {\r\n                for (let row = 0; row < 20; row+=9) {\r\n                    oneSubGrid = oneSubGrid.concat(candidates[row+column]);\r\n                }\r\n            }\r\n            allTheSubGridCandidates.push(singles(oneSubGrid));\r\n        }\r\n\r\n        const tempHiddenSingles = []\r\n        for (let index = 0; index < 81; index++) {\r\n            const tempSingle = []\r\n            for (let candidate = 0; candidate < candidates[index].length; candidate++) {\r\n                const theRow = Math.floor(index/9);\r\n                const theColumn = index%9;\r\n                const theSubGrid = findSubGrid(theColumn, theRow);\r\n\r\n                if (allTheRowSingles[theRow].includes(candidates[index][candidate]) ||\r\n                    allTheColumnSingles[theColumn].includes(candidates[index][candidate]) ||\r\n                    allTheSubGridCandidates[theSubGrid].includes(candidates[index][candidate])) {\r\n                        tempSingle.push(candidates[index][candidate]);\r\n                }\r\n            }\r\n            if (tempSingle.length > 0) {\r\n                tempHiddenSingles.push(tempSingle);\r\n            } else {\r\n                tempHiddenSingles.push([]);\r\n            }\r\n            \r\n        }\r\n        setHiddenSingles(tempHiddenSingles);\r\n    }\r\n\r\n    function findCandidates() {\r\n        // Find all numbers in each row\r\n        let rowNumbers = [];\r\n        for (let row = 0; row < 81; row+=9) {\r\n            let oneRow = [];\r\n            for (let column = 0; column < 9; column++) {\r\n                if (grid[row+column] > 0) {\r\n                    oneRow.push(grid[row+column]);\r\n                }\r\n            }\r\n            rowNumbers.push(oneRow);\r\n        }\r\n        \r\n        // Find all numbers in each column\r\n        let columnNumbers = [];\r\n        for (let column = 0; column < 9; column++) {\r\n            let oneColumn = [];\r\n            for (let row = 0; row < 81; row+=9) {\r\n                if (grid[row+column] > 0) {\r\n                    oneColumn.push(grid[row+column]);\r\n                }\r\n            }\r\n            columnNumbers.push(oneColumn);\r\n        }\r\n\r\n        // Find all numbers in each subgrid\r\n        const subGridStartingIndexes = [0, 3, 6, 27, 30, 33, 54, 57, 60]\r\n        let subGridNumbers = [];\r\n        for (let subGrid = 0; subGrid < 9; subGrid++) {\r\n            const subGridStartingIndex = subGridStartingIndexes[subGrid];\r\n            let oneSubGrid = []\r\n\r\n            for (let column = subGridStartingIndex; column < 3 + subGridStartingIndex; column++) {\r\n                for (let row = 0; row < 20; row+=9) {\r\n                    if (grid[row+column] > 0) {\r\n                        oneSubGrid.push(grid[row+column]);\r\n                    }\r\n                }\r\n            }\r\n            subGridNumbers.push(oneSubGrid);\r\n        }\r\n\r\n        const possibleCandidates = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n        const tempCandidates = Array(81).fill([]);\r\n        for (let index = 0; index < grid.length; index++) {\r\n            if (grid[index] === 0) {\r\n                const row = Math.floor(index/9);\r\n                const column = index%9;\r\n                const subGrid = findSubGrid(column, row);\r\n\r\n                const notPossibleCandidates = rowNumbers[row].concat(columnNumbers[column], subGridNumbers[subGrid]);\r\n                const cellsCandidates = possibleCandidates.filter(i => !notPossibleCandidates.includes(i));\r\n\r\n                tempCandidates[index] = cellsCandidates;\r\n            }\r\n            else {\r\n                tempCandidates[index] = [grid[index]];\r\n            }\r\n        }\r\n\r\n        setCandidates(tempCandidates);\r\n    }\r\n\r\n    // refactor?\r\n    function findSubGrid(column, row) {\r\n        \r\n        if (row < 3) {\r\n            if (column < 3) {\r\n                return 0;\r\n            }\r\n            else if (column < 6) {\r\n                return 1;\r\n            }\r\n            else if (column < 9) {\r\n                return 2;\r\n            }\r\n        } \r\n        else if ( row < 6) {\r\n            if (column < 3) {\r\n                return 3;\r\n            }\r\n            else if (column < 6) {\r\n                return 4;\r\n            }\r\n            else if (column < 9) {\r\n                return 5;\r\n            }    \r\n        }\r\n        else if ( row < 9) {\r\n            if (column < 3) {\r\n                return 6;\r\n            }\r\n            else if (column < 6) {\r\n                return 7;\r\n            }\r\n            else if (column < 9) {\r\n                return 8;\r\n            }    \r\n        }\r\n    }\r\n\r\n    function solvePuzzleClicked() {\r\n        setSolvePuzzleToggle(true);\r\n      //  findCandidates();\r\n    }\r\n\r\n    function isValid(theGrid, index, num) {\r\n        const row = Math.floor(index/9);\r\n        const column = index%9;\r\n        \r\n        // row\r\n        for (let x = row * 9 ; x < (row*9)+9; x++) {\r\n            if (theGrid[x] === num) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // column\r\n        for (let x = column; x < 81; x+=9) {\r\n            if (theGrid[x] === num) {\r\n                return false;\r\n            }       \r\n        }\r\n        \r\n        // subGrid\r\n       const theSubGrid = findSubGrid(column, row);\r\n\r\n      const subGridStartingIndex = Math.floor(theSubGrid / 3) * 27 + ((theSubGrid % 3) * 3);\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                if (theGrid[subGridStartingIndex + i + (j*9)] === num) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function solveSuduko(gridCopy, index) {\r\n        // exit condition if entire grid is solved\r\n        if (index === 81) {\r\n            return true;\r\n        }\r\n           \r\n        // checks if cell already has a number in it\r\n        if (grid[index] > 0) {\r\n            return solveSuduko(grid, index + 1);\r\n        }\r\n     \r\n        for (let num = 1; num <= 9; num++) {\r\n            if (isValid(grid, index, num)) {\r\n                  grid[index] = num;\r\n\r\n                if (solveSuduko(grid, index + 1)) {\r\n                    setGrid(grid);\r\n                    return true;\r\n                }\r\n            }\r\n            grid[index] = 0;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (solvePuzzleToggle === true) {\r\n            let gridCopy = [...grid];\r\n\r\n            if (solveSuduko(gridCopy, 0) === true) {\r\n                console.log('puzzle solved');\r\n                setSolvePuzzleToggle(false);\r\n            } else {\r\n                console.log('not solvable');\r\n            }\r\n        }\r\n    }, [solvePuzzleToggle]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (hiddenSinglesToggle === true) {\r\n            findHiddenSingles();\r\n        }\r\n    }, [candidates]);\r\n    \r\n    useEffect(() => {\r\n        findCandidates();\r\n\r\n        if (showCandidatesToggle === false) {\r\n            setHiddenSinglesToggle(false);\r\n            setNakedSinglesToggle(false);\r\n            setCandidates(Array(81).fill([]));\r\n        } \r\n    }, [hiddenSinglesToggle, nakedSinglesToggle, showCandidatesToggle, grid]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Sudoku</h1>\r\n            <div className=\"gridDisplay\">\r\n                <Grid key={gameId}\r\n                      grid={grid} \r\n                      setGrid={setGrid} \r\n                      starterGrid={starterGrid} \r\n                      candidates={candidates} \r\n                      updateCandidates={updateCandidates} \r\n                      nakedSinglesToggle={nakedSinglesToggle} \r\n                      hiddenSinglesToggle={hiddenSinglesToggle} \r\n                      hiddenSingles={hiddenSingles}\r\n                      isGamePaused={isGamePaused}/>\r\n                <div>\r\n                    <ComboBoxes />\r\n                    <Buttons newGame={newGame} \r\n                            pauseGame={pauseGame} \r\n                            solvePuzzle={solvePuzzleClicked} \r\n                            isGamePaused={isGamePaused} \r\n                            resetPuzzle={resetPuzzle} \r\n                            resetTimer={resetTimer}\r\n                            setResetTimer={setResetTimer}/>\r\n                </div>\r\n                <CheckBoxes showCandidatesToggle={showCandidatesToggle} \r\n                            setShowCandidatesToggle={setShowCandidatesToggle}\r\n                            hiddenSinglesToggle={hiddenSinglesToggle}\r\n                            setHiddenSinglesToggle={setHiddenSinglesToggle}\r\n                            nakedSinglesToggle={nakedSinglesToggle}\r\n                            setNakedSinglesToggle={setNakedSinglesToggle}\r\n                            />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Sudoku;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Sudoku from \"./components/Sudoku.js\"\n\nimport \"./index.css\";\n\nvar destination = document.getElementById(\"container\");\n\nfunction App() {\n    return (\n        <div>\n            <Sudoku/>\n        </div>\n    );\n}\n\nReactDOM.render(\n    <App />,\n    destination\n); "],"sourceRoot":""}