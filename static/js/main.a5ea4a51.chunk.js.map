{"version":3,"sources":["components/Timer.js","components/CellHasNumber.js","components/CellHasCandidates.js","components/Cell.js","components/Grid.js","components/CheckBoxes.js","components/ComboBoxes.js","components/SolvePuzzle.js","components/Buttons.js","components/Sudoku.js","index.js"],"names":["Timer","isGamePaused","isPuzzleCompleted","resetTimer","setResetTimer","useState","totalSeconds","setTotalSeconds","useEffect","intervalID","setTimeout","clearInterval","className","timeString","tempTotalSeconds","hours","Math","floor","minutes","seconds","displayTime","CellHasNumber","gridID","value","updateGrid","revealedCell","invalidCellNumber","style","marginRight","pointerEvents","opacity","onContextMenu","e","preventDefault","onMouseDown","button","CellHasCandidates","candidates","updateCandidates","nakedSinglesToggle","hiddenSinglesToggle","hiddenSingles","highlightNakedSingles","length","highlightHiddenSingles","number","includes","onClick","parseInt","target","id","Cell","Grid","grid","setGrid","revealedGrid","puzzleCompleted","setIsPuzzleSolvable","Array","fill","invalidCellNumbers","setInvalidCellNumbers","newGrid","invalidCells","row","count","index","push","column","subGrid","subGridStartingIndex","findAnyInvalidCellNumbers","newInvalidCells","updateInvalidCellNumbers","cellNumbers","checkForWinningGrid","map","item","CheckBoxes","showCandidatesToggle","setShowCandidatesToggle","setHiddenSinglesToggle","setNakedSinglesToggle","type","onChange","checked","ComboBoxes","setPuzzleSource","setPuzzleDifficulty","htmlFor","event","name","SolvePuzzle","findSubGrid","isPuzzleSolvable","solvePuzzleToggle","setSolvePuzzleToggle","isValid","theGrid","num","x","theSubGrid","i","j","solveSuduko","gridCopy","console","log","disabled","Buttons","newPuzzle","savePuzzle","resetPuzzle","pauseGame","Sudoku","starterGrid","gameId","setIsGamePaused","setIsPuzzleCompleted","puzzleSource","puzzleDifficulty","setRevealedGrid","setCandidates","setHiddenSingles","singles","array","single","indexOf","savedGrid","localStorage","getItem","JSON","parse","savedRevealedGrid","allTheRowSingles","oneRow","concat","allTheColumnSingles","oneColumn","subGridStartingIndexes","allTheSubGridCandidates","oneSubGrid","tempHiddenSingles","tempSingle","candidate","theRow","theColumn","findHiddenSingles","rowNumbers","columnNumbers","subGridNumbers","possibleCandidates","tempCandidates","notPossibleCandidates","cellsCandidates","filter","findCandidates","cell","splice","fetch","then","response","text","html","stringify","tempGrid","c","catch","err","statusText","setItem","destination","document","getElementById","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.a5ea4a51.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport \"../styles/Timer.css\";\r\n\r\nfunction Timer({ isGamePaused, isPuzzleCompleted, resetTimer, setResetTimer }) {\r\n\tconst [totalSeconds, setTotalSeconds] = useState(0);\r\n\r\n\tfunction displayTime(totalSeconds) {\r\n\t\tlet timeString = '0:00';\r\n\t\tif (totalSeconds > 0) {\r\n\t\t\tlet tempTotalSeconds = totalSeconds;\r\n\t\t\tconst hours = Math.floor(tempTotalSeconds / 3600);\r\n\t\t\ttempTotalSeconds %= 3600;\r\n\r\n\t\t\tconst minutes = Math.floor(tempTotalSeconds / 60);\r\n\t\t\ttempTotalSeconds %= 60;\r\n\t\t\t\r\n\t\t\tconst seconds = Math.floor(tempTotalSeconds); \r\n\r\n\t\t\tif (hours > 0) {\r\n\t\t\t\ttimeString = hours + ':';\r\n\t\t\t} else {\r\n\t\t\t\ttimeString = '';\r\n\t\t\t}\r\n\r\n\t\t\tif (minutes > 0) {\r\n\t\t\t\tif (minutes < 10) {\r\n\t\t\t\t\ttimeString += '0'\r\n\t\t\t\t}\r\n\t\t\t\ttimeString += minutes + ':';\r\n\t\t\t} else {\r\n\t\t\t\ttimeString += '0:';\r\n\t\t\t}\r\n\r\n\t\t\tif (seconds > 0) {\r\n\t\t\t\tif (seconds < 10) {\r\n\t\t\t\t\ttimeString += '0';\r\n\t\t\t\t}\r\n\t\t\t\ttimeString += seconds;\r\n\t\t\t} else {\r\n\t\t\t\ttimeString += '00';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// temp\r\n\t\tif (isGamePaused) {\r\n\t\t\ttimeString += ' (PAUSED)';\r\n\t\t} else if (isPuzzleCompleted) {\r\n\t\t\ttimeString += ' (Puzzle Completed!)';\r\n\t\t}\r\n\r\n\t\treturn timeString;\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (resetTimer === true) {\r\n\t\t\tsetTotalSeconds(0);\r\n\t\t\tsetResetTimer(false);\r\n\t\t}\r\n\t\t\t\r\n\t}, [resetTimer]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst intervalID = setTimeout(() => {\r\n\t\t\tif(!isGamePaused && !isPuzzleCompleted) {\r\n\t\t\t\tsetTotalSeconds(totalSeconds + 1);\r\n\t\t\t}\r\n\t\t}, 1000);\r\n\r\n\t\treturn () => clearInterval(intervalID);\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div className=\"theTimer\">\r\n\t\t\t{displayTime(totalSeconds)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Timer;","import \"../styles/CellHasNumber.css\";\r\n\r\nfunction CellHasNumber(gridID, value, updateGrid, revealedCell, invalidCellNumber, isGamePaused) {\r\n  function onContextMenu(e) {\r\n    e.preventDefault();\r\n  }\r\n\r\n  function mouseDownHandler(e) {\r\n    // prevents scroll circle\r\n    e.preventDefault();\r\n\r\n    // if middle mouse button is clicked\r\n\t\tif(revealedCell === false && e.button === 1) {\r\n\t\t\tupdateGrid(gridID, 0);\r\n\t\t}\r\n\t}\r\n\r\n\t// refactor\r\n\tfunction getStyle() {\r\n\t\tconst notPaused = {\r\n\t\t\tmarginRight: \"5px\",\r\n\t\t}\r\n\r\n\t\tconst paused = {\r\n\t\t\tmarginRight: \"5px\",\r\n\t\t\tpointerEvents: \"none\",\r\n\t\t\topacity: \"0.4\",\r\n\t\t}\r\n\r\n\t\tif (isGamePaused) {\r\n\t\t\treturn paused;\r\n\t\t}\r\n\t\t\t\t\r\n\t\treturn notPaused;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div style={getStyle()}>\r\n\t\t\t<div className={revealedCell ? \"cellNumberRevealed\" : \"cellNumber\"} onContextMenu={onContextMenu} onMouseDown={mouseDownHandler} >\r\n\t\t\t\t{value}\r\n\t\t\t\t<div className={invalidCellNumber ? \"invalidCellNumber\" : \"\"}></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CellHasNumber;","import \"../styles/CellHasCandidates.css\";\r\n\r\nfunction CellHasCandidates(gridID, updateGrid, candidates, updateCandidates, nakedSinglesToggle, hiddenSinglesToggle, hiddenSingles, isGamePaused) {\r\n\r\n\tfunction onClick(e) {\r\n\t\tupdateGrid(gridID, parseInt(e.target.id), 10);\r\n\t}\r\n\r\n\tfunction onContextMenu(e) {\r\n\t\te.preventDefault();\r\n\t\tupdateCandidates(gridID, parseInt(e.target.id), 10);\r\n\t}\r\n\r\n\tfunction mouseDownHandler(e) {\r\n\t\t// prevents scroll circle\r\n\t\te.preventDefault();\r\n\t}\r\n\r\n\tfunction highlightNakedSingles() {\r\n\t\treturn nakedSinglesToggle && candidates.length === 1;\r\n\t}\r\n\r\n\tfunction highlightHiddenSingles(number) {\r\n\t\treturn  hiddenSinglesToggle && hiddenSingles[gridID].includes(number);\r\n\t}\r\n\r\n\t// refactor\r\n\tfunction getStyle() {\r\n\t\tconst notPaused = {\r\n\t\t\tmarginRight: \"5px\",\r\n\t\t}\r\n\r\n\t\tconst paused = {\r\n\t\t\tmarginRight: \"5px\",\r\n\t\t\tpointerEvents: \"none\",\r\n\t\t\topacity: \"0.4\",\r\n\t\t}\r\n\r\n\t\tif (isGamePaused) {\r\n\t\t\treturn paused;\r\n\t\t} \r\n\r\n\t\treturn notPaused;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div style={getStyle()} className=\"cell\" onClick={onClick} onContextMenu={onContextMenu} onMouseDown={mouseDownHandler} >\r\n\t\t\t{ candidates.includes(1) ? <div id=\"1\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(1) ? \"redText\" : \"blackText\"}`}>1</div> : <div id=\"1\" className=\"candidateCell\"/> }\r\n\t\t\t{ candidates.includes(2) ? <div id=\"2\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(2) ? \"redText\" : \"blackText\"}`}>2</div> : <div id=\"2\" className=\"candidateCell\"/> }\r\n\t\t\t{ candidates.includes(3) ? <div id=\"3\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(3) ? \"redText\" : \"blackText\"}`}>3</div> : <div id=\"3\" className=\"candidateCell\"/> }\r\n\r\n\t\t\t{ candidates.includes(4) ? <div id=\"4\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(4) ? \"redText\" : \"blackText\"}`}>4</div> : <div id=\"4\" className=\"candidateCell\"/> }\r\n\t\t\t{ candidates.includes(5) ? <div id=\"5\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(5) ? \"redText\" : \"blackText\"}`}>5</div> : <div id=\"5\" className=\"candidateCell\"/> }\r\n\t\t\t{ candidates.includes(6) ? <div id=\"6\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(6) ? \"redText\" : \"blackText\"}`}>6</div> : <div id=\"6\" className=\"candidateCell\"/> }\r\n\r\n\t\t\t{ candidates.includes(7) ? <div id=\"7\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(7) ? \"redText\" : \"blackText\"}`}>7</div> : <div id=\"7\" className=\"candidateCell\"/> }\r\n\t\t\t{ candidates.includes(8) ? <div id=\"8\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(8) ? \"redText\" : \"blackText\"}`}>8</div> : <div id=\"8\" className=\"candidateCell\"/> }\r\n\t\t\t{ candidates.includes(9) ? <div id=\"9\" className={`candidateCell ${highlightNakedSingles() || highlightHiddenSingles(9) ? \"redText\" : \"blackText\"}`}>9</div> : <div id=\"9\" className=\"candidateCell\"/> }\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CellHasCandidates;","import React from \"react\";\r\n\r\nimport CellHasNumber from \"./CellHasNumber.js\"\r\nimport CellHasCandidates from \"./CellHasCandidates.js\"\r\n\r\nimport \"../index.css\";\r\n\r\nfunction Cell({ gridID, value, updateGrid, revealedCell, invalidCellNumber, candidates, updateCandidates, nakedSinglesToggle, hiddenSinglesToggle, hiddenSingles, isGamePaused }) {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{value === 0 ? CellHasCandidates(gridID, updateGrid, candidates, updateCandidates, nakedSinglesToggle, hiddenSinglesToggle, hiddenSingles, isGamePaused) : CellHasNumber(gridID, value, updateGrid, revealedCell, invalidCellNumber, isGamePaused) }\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Cell;","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Cell from \"./Cell.js\"\r\nimport \"../styles/Grid.css\";\r\n\r\nfunction Grid({ grid, setGrid, revealedGrid, candidates, updateCandidates, nakedSinglesToggle, hiddenSinglesToggle, hiddenSingles, isGamePaused, puzzleCompleted, setIsPuzzleSolvable }) {\r\n\tconst [invalidCellNumbers, setInvalidCellNumbers] = useState([Array(81).fill(false)]);\r\n\r\n\tfunction updateGrid(gridID, value) {\r\n\t\tconst newGrid = [...grid];\r\n\t\tnewGrid[gridID] = value;\r\n\r\n\t\tsetGrid(newGrid);\r\n\t}\r\n\r\n\tfunction updateInvalidCellNumbers(invalidCells) {\r\n\t\tconst newInvalidCells = Array(81).fill(false);\r\n\r\n\t\tfor (let index = 0; index < invalidCells.length; index++) {\r\n\t\t\tnewInvalidCells[invalidCells[index]] = true;\r\n\t\t}\r\n\r\n\t\tsetInvalidCellNumbers(newInvalidCells);\r\n\t}\r\n\r\n\tfunction checkForWinningGrid(invalidCells) {\r\n\t\tlet cellNumbers = 0;\r\n\r\n\t\tfor (let index = 0; index < grid.length; index++) {\r\n\t\t\tif (grid[index] !== 0) {\r\n\t\t\t\tcellNumbers += 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (cellNumbers === 81 && invalidCells.length === 0) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\t\t\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction findAnyInvalidCellNumbers() {\r\n\t\tconst invalidCells = [];\r\n\r\n\t\t// Horizontal check\r\n\t\tfor (let row = 0; row < 81; row+=9) {\r\n\t\t\tvar count = {};\r\n\t\t\tfor (let index = 0+row; index < 9+row; index++) {\r\n\t\t\t\tvar number = grid[index];\r\n\t\t\t\tif (number > 0) {\r\n\t\t\t\t\tif (number in count) {\r\n\t\t\t\t\t\tinvalidCells.push(count[number]);\r\n\t\t\t\t\t\tinvalidCells.push(index);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcount[number] = index;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Vertical check\r\n\t\tfor (let column = 0; column < 9; column++) {\r\n\t\t\tcount = {};\r\n\t\t\tfor (let index = 0+column; index < 81+column; index+=9) {\r\n\t\t\t\tnumber = grid[index];\r\n\t\t\t\tif (number > 0) {\r\n\t\t\t\t\tif (number in count) {\r\n\t\t\t\t\t\tinvalidCells.push(count[number]);\r\n\t\t\t\t\t\tinvalidCells.push(index);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcount[number] = index;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Subgrid check\r\n\t\tfor (let subGrid = 0; subGrid < 9; subGrid++) {\r\n\t\t\tcount = {};\r\n\t\t\tconst subGridStartingIndex = Math.floor(subGrid / 3) * 27 + ((subGrid % 3) * 3);\r\n\r\n\t\t\tfor (let column = subGridStartingIndex; column < 3 + subGridStartingIndex; column++) {\r\n\t\t\t\tfor (let row = 0; row < 20; row+=9) {\r\n\t\t\t\t\tnumber = grid[column+row];\r\n\t\t\t\t\tif (number > 0) {\r\n\t\t\t\t\t\tif (number in count) {\r\n\t\t\t\t\t\t\tinvalidCells.push(count[number]);\r\n\t\t\t\t\t\t\tinvalidCells.push(column+row);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcount[number] = column+row;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\t\t\t\r\n\t\treturn invalidCells;\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tconst invalidCells = findAnyInvalidCellNumbers();\r\n\r\n\t\tupdateInvalidCellNumbers(invalidCells);\r\n\r\n\t\tif (invalidCells.length > 0) {\r\n\t\t\tsetIsPuzzleSolvable(false);\r\n\t\t} else {\r\n\t\t\tsetIsPuzzleSolvable(true);\r\n\t\t}\r\n\r\n\t\tif (checkForWinningGrid(invalidCells)) {\r\n\t\t\tpuzzleCompleted();\r\n\t\t}\r\n\t}, [grid]);\r\n\r\n\treturn (\r\n\t\t<div className=\"gameBoardGrid\">                                                                                          \r\n\t\t\t{ grid.map((item, index) =>\r\n\t\t\t\t<Cell key={index} \r\n\t\t\t\t\t\t\tgridID={index} \r\n\t\t\t\t\t\t\tvalue={item} \r\n\t\t\t\t\t\t\tupdateGrid={updateGrid} \r\n\t\t\t\t\t\t\trevealedCell={revealedGrid[index] !== 0} \r\n\t\t\t\t\t\t\tinvalidCellNumber={invalidCellNumbers[index]} \r\n\t\t\t\t\t\t\tcandidates={candidates[index]} \r\n\t\t\t\t\t\t\tupdateCandidates={updateCandidates} \r\n\t\t\t\t\t\t\tnakedSinglesToggle={nakedSinglesToggle}\r\n\t\t\t\t\t\t\thiddenSinglesToggle={hiddenSinglesToggle}\r\n\t\t\t\t\t\t\thiddenSingles={hiddenSingles}\r\n\t\t\t\t\t\t\tisGamePaused={isGamePaused}/> \r\n\t\t\t\t\t\t\t)}\r\n\t\t</div> \r\n\t);\r\n}\r\n\r\nexport default Grid;","import \"../styles/CheckBoxes.css\";\r\n\r\nfunction CheckBoxes({ showCandidatesToggle, setShowCandidatesToggle, hiddenSinglesToggle, setHiddenSinglesToggle, nakedSinglesToggle, setNakedSinglesToggle }) {\r\n\treturn (\r\n\t\t<div className=\"checkbox-container\">\r\n      <label>\r\n\t\t\t\t<input type=\"checkbox\" onChange={() => {setShowCandidatesToggle(!showCandidatesToggle)}} />\r\n\t\t\t\tShow Candidates\r\n\t\t\t</label>\r\n\t\t\t<label>\r\n\t\t\t\t<input type=\"checkbox\" checked={nakedSinglesToggle} onChange={() => {setNakedSinglesToggle(!nakedSinglesToggle)}} />\r\n\t\t\t\tShow Naked Singles\r\n\t\t\t</label>\r\n      <label>\r\n\t\t\t\t<input type=\"checkbox\" checked={hiddenSinglesToggle} onChange={() => {setHiddenSinglesToggle(!hiddenSinglesToggle)}} />\r\n\t\t\t\tShow Hidden Singles\r\n\t\t\t</label>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CheckBoxes;","import \"../styles/ComboBoxes.css\";\r\n\r\nfunction ComboBoxes({ setPuzzleSource, setPuzzleDifficulty }) {\r\n\r\n\tfunction puzzleSourceChange(event) {\r\n\t\tsetPuzzleSource(event.target.value);\r\n\t}\r\n\r\n\tfunction puzzleDifficultyChange(event) {\r\n\t\tsetPuzzleDifficulty(event.target.value);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"combo-container\">\r\n      <div className=\"label-comboBox\">\r\n        <label htmlFor=\"puzzleSource\">Puzzle Source:</label>\r\n        <select id=\"puzzleSource\" onChange={puzzleSourceChange} name=\"puzzleSource\">\r\n          <option value=\"sugoku\">Sugoku</option>\r\n        </select>\r\n      </div>\r\n      <div className=\"label-comboBox\">\r\n        <label htmlFor=\"puzzleDifficulty\">Puzzle Difficulty:</label>\r\n        <select id=\"puzzleDifficulty\" onChange={puzzleDifficultyChange} name=\"puzzleDifficulty\">\r\n          <option value=\"easy\">Easy</option>\r\n          <option value=\"medium\">Medium</option>\r\n          <option value=\"hard\">Hard</option>\r\n        </select>\r\n      </div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ComboBoxes;","import React, { useState, useEffect } from \"react\";\r\n\r\nfunction SolvePuzzle({ grid, setGrid, findSubGrid, isPuzzleSolvable }) {\r\n\tconst [solvePuzzleToggle, setSolvePuzzleToggle] = useState(false);\r\n\t\r\n\tfunction solvePuzzleClicked() {\r\n\t\tsetSolvePuzzleToggle(true);\r\n\t}\r\n\r\n\tfunction isValid(theGrid, index, num) {\r\n\t\tconst row = Math.floor(index/9);\r\n\t\tconst column = index%9;\r\n\t\t\r\n\t\t// row\r\n\t\tfor (let x = row * 9 ; x < (row*9)+9; x++) {\r\n\t\t\tif (theGrid[x] === num) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// column\r\n\t\tfor (let x = column; x < 81; x+=9) {\r\n\t\t\tif (theGrid[x] === num) {\r\n\t\t\t\treturn false;\r\n\t\t\t}       \r\n\t\t}\r\n\t\t\r\n\t\t// subGrid\r\n\t\tconst theSubGrid = findSubGrid(column, row);\r\n\r\n\t\tconst subGridStartingIndex = Math.floor(theSubGrid / 3) * 27 + ((theSubGrid % 3) * 3);\r\n\r\n\t\tfor (let i = 0; i < 3; i++) {\r\n\t\t\tfor (let j = 0; j < 3; j++) {\r\n\t\t\t\tif (theGrid[subGridStartingIndex + i + (j*9)] === num) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction solveSuduko(gridCopy, index) {\r\n\t\t// exit condition if entire grid is solved\r\n\t\tif (index === 81) {\r\n\t\t\tsetGrid(gridCopy);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\t\t\r\n\t\t// checks if cell already has a number in it\r\n\t\tif (gridCopy[index] > 0) {\r\n\t\t\treturn solveSuduko(gridCopy, index + 1);\r\n\t\t} \r\n\t\r\n\t\tfor (let num = 1; num <= 9; num++) {\r\n\t\t\tif (isValid(gridCopy, index, num)) {\r\n\t\t\t\tgridCopy[index] = num;\r\n\r\n\t\t\t\tif (solveSuduko(gridCopy, index + 1)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tgridCopy[index] = 0;\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif (solvePuzzleToggle) {\r\n\t\t\tlet gridCopy = [...grid];\r\n\r\n\t\t\tif (solveSuduko(gridCopy, 0) === true) {\r\n\t\t\t\tconsole.log('Puzzle Solved!');\r\n\t\t\t\tsetSolvePuzzleToggle(false);\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log('Not Solvable!');\r\n\t\t\t}\r\n\t\t}\r\n\t}, [solvePuzzleToggle]);\r\n\r\n\treturn (\r\n\t\t<input type=\"button\" \r\n\t\t\t\t\t\tid=\"solvePuzzleButton\" \r\n\t\t\t\t\t\tvalue=\"Solve Puzzle\" \r\n\t\t\t\t\t\tdisabled={!isPuzzleSolvable} \r\n\t\t\t\t\t\tonClick={solvePuzzleClicked}/>\r\n\t);\r\n}\r\n\r\nexport default SolvePuzzle;","\r\nimport SolvePuzzle from \"./SolvePuzzle.js\"\r\n\r\nimport \"../styles/Buttons.css\";\r\n\r\nfunction Buttons({ newPuzzle, savePuzzle, pauseGame, isGamePaused, resetPuzzle, resetTimer, setResetTimer, grid, setGrid, findSubGrid, isPuzzleCompleted, isPuzzleSolvable }) {\r\n\treturn (\r\n\t\t<div className='theButtons'>\r\n\t\t\t\t<input type=\"button\" id=\"newPuzzleButton\" value=\"New Puzzle\" onClick={newPuzzle}/>\r\n\t\t\t<div> \r\n        <input type=\"button\" id=\"savePuzzleButton\" value=\"Save Puzzle\"onClick={savePuzzle}/>\r\n\t\t\t\t<input type=\"button\" id=\"resetPuzzleButton\" value=\"Reset Puzzle\" onClick={resetPuzzle}/>\r\n\t\t\t\t<SolvePuzzle grid={grid} setGrid={setGrid} findSubGrid={findSubGrid} isPuzzleSolvable={isPuzzleSolvable}/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Buttons;","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Timer from \"./Timer.js\"\r\nimport Grid from \"./Grid.js\"\r\nimport CheckBoxes from \"./CheckBoxes.js\"\r\nimport ComboBoxes from \"./ComboBoxes.js\"\r\nimport Buttons from \"./Buttons.js\"\r\nimport \"../index.css\";\r\n\r\nfunction Sudoku() {\r\n\tconst starterGrid = [0, 0, 5, 0, 6, 0, 3, 2, 0,\r\n\t\t\t\t\t\t\t\t\t\t\t 0, 0, 0, 3, 0, 0, 0, 0, 4,\r\n\t\t\t\t\t\t\t\t\t\t\t 0, 0, 0, 9, 0, 7, 0, 0, 0,\r\n\t\t\t\t\t\t\t\t\t\t\t 3, 0, 2, 8, 0, 0, 0, 0, 7,\r\n\t\t\t\t\t\t\t\t\t\t\t 0, 0, 7, 0, 0, 0, 4, 0, 5,\r\n\t\t\t\t\t\t\t\t\t\t\t 0, 9, 0, 0, 0, 1, 0, 0, 8,\r\n\t\t\t\t\t\t\t\t\t\t\t 0, 0, 3, 0, 0, 0, 0, 6, 0,\r\n\t\t\t\t\t\t\t\t\t\t\t 0, 0, 0, 0, 7, 0, 0, 0, 0,\r\n\t\t\t\t\t\t\t\t\t\t\t 8, 6, 0, 0, 2, 0, 0, 0, 0];\r\n\r\n\t// const starterGrid2 = [0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n\t//    0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n\t//    0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n\t//    0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n\t//    0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n\t//    0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n\t//    0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n\t//    0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n\t//    0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n\tconst [gameId, setGameId] = useState(1);\r\n\r\n\tconst [resetTimer, setResetTimer] = useState(false);\r\n\t\r\n\tconst [hiddenSinglesToggle, setHiddenSinglesToggle] = useState(false);\r\n\tconst [nakedSinglesToggle, setNakedSinglesToggle] = useState(false);\r\n\tconst [showCandidatesToggle, setShowCandidatesToggle] = useState(false);\r\n\r\n\tconst [isGamePaused, setIsGamePaused] = useState(false);\r\n\tconst [isPuzzleCompleted, setIsPuzzleCompleted] = useState(false);\r\n\tconst [isPuzzleSolvable, setIsPuzzleSolvable] = useState(true);\r\n\r\n\tconst [puzzleSource, setPuzzleSource] = useState('sugoku');\r\n\tconst [puzzleDifficulty, setPuzzleDifficulty] = useState('easy');\r\n\r\n\tconst [revealedGrid, setRevealedGrid] = useState(starterGrid);\r\n\tconst [grid, setGrid] = useState(revealedGrid);\r\n\r\n\tconst [candidates, setCandidates] = useState(Array(81).fill([]));\r\n\t\r\n\tconst [hiddenSingles, setHiddenSingles] = useState(Array(81).fill([]));\r\n\r\n\tfunction newPuzzle() {\r\n\t\tcreateNewPuzzle();\r\n\t\tsetResetTimer(true);\r\n\t}\r\n\r\n\tfunction createNewPuzzle() {\r\n\t\tif (puzzleSource === 'sugoku') {\r\n\t\t\tfetch(`https://sugoku.herokuapp.com/board?difficulty=${puzzleDifficulty}`)\r\n\t\t\t.then(response => {\r\n\t\t\t\treturn response.text();\r\n\t\t\t})\r\n\t\t\t.then(function (html) {\r\n\t\t\t\tlet newPuzzle = JSON.stringify(html);\r\n\r\n\t\t\t\tlet tempGrid = [];\r\n\r\n\t\t\t\tfor (let index = 0; index < newPuzzle.length; index++) {\r\n\t\t\t\t\tlet c = newPuzzle[index]\r\n\t\t\t\t\tif (c >= '0' && c <= '9') {\r\n\t\t\t\t\t\ttempGrid.push(parseInt(c), 10);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsetRevealedGrid(tempGrid);\r\n\t\t\t\tsetGrid(tempGrid);\r\n\t\t\t})\r\n\t\t\t.catch(function (err) {\r\n\t\t\t\t// 'Not Found'\r\n\t\t\t\tconsole.log(err.statusText);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tfunction savePuzzle() {\r\n\t\tlocalStorage.setItem('savedGrid',  JSON.stringify(grid));\r\n\t\tlocalStorage.setItem('savedRevealedGrid',JSON.stringify(revealedGrid));\r\n\t}\r\n\r\n\tfunction pauseGame() {\r\n\t\tsetIsGamePaused(!isGamePaused);\r\n\t}\r\n\r\n\tfunction resetPuzzle() {\r\n\t\tsetGrid(revealedGrid);\r\n\t\tsetCandidates(Array(81).fill([]));\r\n\t\tsetHiddenSingles(Array(81).fill([]));\r\n\t\tsetResetTimer(true);\r\n\r\n\t\tsetIsGamePaused(false);\r\n\t\tsetIsPuzzleCompleted(false);\r\n\t}\r\n \r\n\tfunction updateCandidates(cell, candidate) {\r\n\t\tconst tempCandidates = [...candidates];\r\n\r\n\t\tlet index = tempCandidates[cell].indexOf(candidate);\r\n\t\tif (index === -1) {\r\n\t\t\ttempCandidates[cell] = [...tempCandidates[cell], candidate];\r\n\t\t} else {\r\n\t\t\ttempCandidates[cell].splice(index, 1);\r\n\t\t}\r\n\r\n\t\tsetCandidates(tempCandidates);\r\n\t}\r\n\r\n\t// refactor?\r\n\tfunction singles(array) {\r\n\t\tlet single = [];\r\n\t\tfor (let index = 0; index < array.length; index++) {\r\n\t\t\tif (array.indexOf(array[index], array.indexOf(array[index]) + 1) === -1)\r\n\t\t\t\tsingle.push(array[index]);\r\n\t\t};\r\n\r\n\t\treturn single;\r\n\t};\r\n      \r\n\t// refactor?  BUGS\r\n\tfunction findHiddenSingles() {\r\n\t\t// rows singles\r\n\t\tlet allTheRowSingles = [];\r\n\t\tfor (let row = 0; row < 81; row+=9) {\r\n\t\t\tlet oneRow = [];\r\n\t\t\tfor (let index = row; index < row+9; index++) {\r\n\t\t\t\toneRow = oneRow.concat(candidates[index]);\r\n\t\t\t}\r\n\r\n\t\t\tallTheRowSingles.push(singles(oneRow));\r\n\t\t}\r\n\r\n\t\t// columns singles\r\n\t\tlet allTheColumnSingles = [];\r\n\t\tfor (let column = 0; column < 9; column++) {\r\n\t\t\tlet oneColumn = [];\r\n\t\t\tfor (let index = column; index < 81; index+=9) {\r\n\t\t\t\t\toneColumn = oneColumn.concat(candidates[index]);\r\n\t\t\t}\r\n\r\n\t\t\tallTheColumnSingles.push(singles(oneColumn));\r\n\t\t}\r\n\r\n\t\t// subgrid singles\r\n\t\tconst subGridStartingIndexes = [0, 3, 6, 27, 30, 33, 54, 57, 60]\r\n\t\tlet allTheSubGridCandidates = [];\r\n\t\tfor (let subGrid = 0; subGrid < 9; subGrid++) {\r\n\t\t\tconst subGridStartingIndex = subGridStartingIndexes[subGrid];\r\n\t\t\tlet oneSubGrid = []\r\n\r\n\t\t\tfor (let column = subGridStartingIndex; column < 3 + subGridStartingIndex; column++) {\r\n\t\t\t\tfor (let row = 0; row < 20; row+=9) {\r\n\t\t\t\t\toneSubGrid = oneSubGrid.concat(candidates[row+column]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tallTheSubGridCandidates.push(singles(oneSubGrid));\r\n\t\t}\r\n\r\n\t\tconst tempHiddenSingles = []\r\n\t\tfor (let index = 0; index < 81; index++) {\r\n\t\t\tconst tempSingle = []\r\n\t\t\tfor (let candidate = 0; candidate < candidates[index].length; candidate++) {\r\n\t\t\t\tconst theRow = Math.floor(index/9);\r\n\t\t\t\tconst theColumn = index%9;\r\n\t\t\t\tconst theSubGrid = findSubGrid(theColumn, theRow);\r\n\r\n\t\t\t\tif (allTheRowSingles[theRow].includes(candidates[index][candidate]) ||\r\n\t\t\t\t\t\tallTheColumnSingles[theColumn].includes(candidates[index][candidate]) ||\r\n\t\t\t\t\t\tallTheSubGridCandidates[theSubGrid].includes(candidates[index][candidate])) {\r\n\t\t\t\t\t\t\ttempSingle.push(candidates[index][candidate]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (tempSingle.length > 0) {\r\n\t\t\t\ttempHiddenSingles.push(tempSingle);\r\n\t\t\t} else {\r\n\t\t\t\ttempHiddenSingles.push([]);\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t}\r\n\t\tsetHiddenSingles(tempHiddenSingles);\r\n\t}\r\n\r\n\tfunction findCandidates() {\r\n\t\t// Find all numbers in each row\r\n\t\tlet rowNumbers = [];\r\n\t\tfor (let row = 0; row < 81; row+=9) {\r\n\t\t\tlet oneRow = [];\r\n\t\t\tfor (let column = 0; column < 9; column++) {\r\n\t\t\t\tif (grid[row+column] > 0) {\r\n\t\t\t\t\toneRow.push(grid[row+column]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\trowNumbers.push(oneRow);\r\n\t\t}\r\n\t\t\r\n\t\t// Find all numbers in each column\r\n\t\tlet columnNumbers = [];\r\n\t\tfor (let column = 0; column < 9; column++) {\r\n\t\t\tlet oneColumn = [];\r\n\t\t\tfor (let row = 0; row < 81; row+=9) {\r\n\t\t\t\tif (grid[row+column] > 0) {\r\n\t\t\t\t\toneColumn.push(grid[row+column]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcolumnNumbers.push(oneColumn);\r\n\t\t}\r\n\r\n\t\t// Find all numbers in each subgrid\r\n\t\tlet subGridNumbers = [];\r\n\t\tfor (let subGrid = 0; subGrid < 9; subGrid++) {\r\n\t\t\tconst subGridStartingIndex = Math.floor(subGrid / 3) * 27 + ((subGrid % 3) * 3);\r\n\t\t\tlet oneSubGrid = []\r\n\r\n\t\t\tfor (let column = subGridStartingIndex; column < 3 + subGridStartingIndex; column++) {\r\n\t\t\t\tfor (let row = 0; row < 20; row+=9) {\r\n\t\t\t\t\tif (grid[row+column] > 0) {\r\n\t\t\t\t\t\toneSubGrid.push(grid[row+column]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsubGridNumbers.push(oneSubGrid);\r\n\t\t}\r\n\r\n\t\tconst possibleCandidates = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\t\tconst tempCandidates = Array(81).fill([]);\r\n\t\tfor (let index = 0; index < grid.length; index++) {\r\n\t\t\tif (grid[index] === 0) {\r\n\t\t\t\tconst row = Math.floor(index/9);\r\n\t\t\t\tconst column = index%9;\r\n\t\t\t\tconst subGrid = findSubGrid(column, row);\r\n\r\n\t\t\t\tconst notPossibleCandidates = rowNumbers[row].concat(columnNumbers[column], subGridNumbers[subGrid]);\r\n\t\t\t\tconst cellsCandidates = possibleCandidates.filter(i => !notPossibleCandidates.includes(i));\r\n\r\n\t\t\t\ttempCandidates[index] = cellsCandidates;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttempCandidates[index] = [grid[index]];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsetCandidates(tempCandidates);\r\n\t}\r\n\r\n\t// refactor?\r\n\tfunction findSubGrid(column, row) {\r\n\t\tif (row < 3) {\r\n\t\t\tif (column < 3) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if (column < 6) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse if (column < 9) {\r\n\t\t\t\treturn 2;\r\n\t\t\t}\r\n\t\t} \r\n\t\telse if ( row < 6) {\r\n\t\t\tif (column < 3) {\r\n\t\t\t\treturn 3;\r\n\t\t\t}\r\n\t\t\telse if (column < 6) {\r\n\t\t\t\treturn 4;\r\n\t\t\t}\r\n\t\t\telse if (column < 9) {\r\n\t\t\t\treturn 5;\r\n\t\t\t}    \r\n\t\t}\r\n\t\telse if ( row < 9) {\r\n\t\t\tif (column < 3) {\r\n\t\t\t\treturn 6;\r\n\t\t\t}\r\n\t\t\telse if (column < 6) {\r\n\t\t\t\treturn 7;\r\n\t\t\t}\r\n\t\t\telse if (column < 9) {\r\n\t\t\t\treturn 8;\r\n\t\t\t}    \r\n\t\t}\r\n\t}\r\n\r\n\tfunction puzzleCompleted() {\r\n\t\t\tsetIsPuzzleCompleted(true);\r\n\t\t\tconsole.log('winner');\r\n\r\n\t\t\t// Remove localStorage on puzzle completion?\r\n\t\t\t// localStorage.removeItem('savedGrid');\r\n\t\t\t// localStorage.removeItem('savedRevealedGrid');\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tconst savedGrid = localStorage.getItem('savedGrid');\r\n\r\n\t\tif (savedGrid !== null) {\r\n\t\t\tsetGrid(JSON.parse(savedGrid));\r\n\t\t} else {\r\n\t\t\tsetGrid(starterGrid);\r\n\t\t}\r\n\r\n\t\tconst savedRevealedGrid = localStorage.getItem('savedRevealedGrid');\r\n\r\n\t\tif (savedRevealedGrid !== null) {\r\n\t\t\tsetRevealedGrid(JSON.parse(savedRevealedGrid));\r\n\t\t} else {\r\n\t\t\tsetRevealedGrid(starterGrid);\r\n\t\t}\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (hiddenSinglesToggle) {\r\n\t\t\tfindHiddenSingles();\r\n\t\t}\r\n\t}, [candidates]);\r\n\t\r\n\tuseEffect(() => {\r\n\t\tfindCandidates();\r\n\r\n\t\tif (!showCandidatesToggle) {\r\n\t\t\tsetHiddenSinglesToggle(false);\r\n\t\t\tsetNakedSinglesToggle(false);\r\n\t\t\tsetCandidates(Array(81).fill([]));\r\n\t\t} \r\n\t}, [hiddenSinglesToggle, nakedSinglesToggle, showCandidatesToggle, grid]);\r\n\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n      <div className=\"header\">\r\n        <h1 className=\"title\">Sudoku</h1>\r\n        <Timer  isGamePaused={isGamePaused} \r\n                isPuzzleCompleted={isPuzzleCompleted} \r\n                resetTimer={resetTimer} \r\n                setResetTimer={setResetTimer}/>\r\n        <button id=\"pauseGameButton\" onClick={pauseGame}>Pause Game</button>        \r\n        {/* <input type=\"button\" id=\"pauseGameButton\" value=\"Pause Game\" onClick={pauseGame}/> */}\r\n      </div>\r\n      <div className=\"gridDisplay\">\r\n        <Grid key={gameId}\r\n          grid={grid} \r\n          setGrid={setGrid} \r\n          revealedGrid={revealedGrid} \r\n          candidates={candidates} \r\n          updateCandidates={updateCandidates} \r\n          nakedSinglesToggle={nakedSinglesToggle} \r\n          hiddenSinglesToggle={hiddenSinglesToggle} \r\n          hiddenSingles={hiddenSingles}\r\n          isGamePaused={isGamePaused}\r\n          puzzleCompleted={puzzleCompleted}\r\n          setIsPuzzleSolvable={setIsPuzzleSolvable}/>\r\n      </div>\r\n      <div className=\"side-bar\">\r\n        <ComboBoxes setPuzzleSource={setPuzzleSource}\r\n                    setPuzzleDifficulty={setPuzzleDifficulty}/>\r\n        <Buttons newPuzzle={newPuzzle} \r\n                savePuzzle={savePuzzle}\r\n                pauseGame={pauseGame} \r\n                isGamePaused={isGamePaused} \r\n                resetPuzzle={resetPuzzle} \r\n                // resetTimer={resetTimer}\r\n                // setResetTimer={setResetTimer}\r\n                grid={grid}\r\n                setGrid={setGrid}\r\n                findSubGrid={findSubGrid}\r\n                isPuzzleCompleted={isPuzzleCompleted}\r\n                isPuzzleSolvable={isPuzzleSolvable} />\r\n      </div>\r\n      <div className=\"footer\">\r\n        <CheckBoxes showCandidatesToggle={showCandidatesToggle} \r\n                    setShowCandidatesToggle={setShowCandidatesToggle}\r\n                    hiddenSinglesToggle={hiddenSinglesToggle}\r\n                    setHiddenSinglesToggle={setHiddenSinglesToggle}\r\n                    nakedSinglesToggle={nakedSinglesToggle}\r\n                    setNakedSinglesToggle={setNakedSinglesToggle} />\r\n      </div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Sudoku;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Sudoku from \"./components/Sudoku.js\"\n\nimport \"./index.css\";\n\nvar destination = document.getElementById(\"container\");\n\nfunction App() {\n    return (\n      <Sudoku/>\n    );\n}\n\nReactDOM.render(\n    <App />,\n    destination\n); "],"sourceRoot":""}